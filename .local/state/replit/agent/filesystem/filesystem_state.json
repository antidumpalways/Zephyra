{"file_contents":{"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Swap from \"@/pages/swap\";\nimport Docs from \"@/pages/docs\";\nimport SDKPage from \"@/pages/sdk\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/swap\" component={Swap} />\n      <Route path=\"/docs\" component={Docs} />\n      <Route path=\"/sdk\" component={SDKPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1048},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/savings-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from \"recharts\";\nimport type { Transaction } from \"@shared/schema\";\n\ninterface SavingsChartProps {\n  transactions: Transaction[];\n  isLoading: boolean;\n}\n\nexport function SavingsChart({ transactions, isLoading }: SavingsChartProps) {\n  if (isLoading) {\n    return <div className=\"h-64 bg-muted animate-pulse rounded\" />;\n  }\n\n  // Process data for cumulative savings\n  const chartData = transactions\n    .slice()\n    .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n    .reduce((acc, tx, index) => {\n      const prevSavings = index > 0 ? acc[index - 1].savings : 0;\n      const currentSavings = parseFloat(tx.actualSavings) || 0;\n      \n      acc.push({\n        date: new Date(tx.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n        savings: prevSavings + currentSavings,\n      });\n      \n      return acc;\n    }, [] as { date: string; savings: number }[]);\n\n  if (chartData.length === 0) {\n    return (\n      <div className=\"h-64 flex items-center justify-center text-muted-foreground\" data-testid=\"empty-state-chart\">\n        <div className=\"text-center\">\n          <p>No data to display yet</p>\n          <p className=\"text-sm mt-1\">Your savings will appear here after your first transaction</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-64\" data-testid=\"chart-savings\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={chartData}>\n          <defs>\n            <linearGradient id=\"savingsGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"0%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0.3} />\n              <stop offset=\"100%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n          <XAxis\n            dataKey=\"date\"\n            stroke=\"hsl(var(--muted-foreground))\"\n            fontSize={12}\n            tickLine={false}\n          />\n          <YAxis\n            stroke=\"hsl(var(--muted-foreground))\"\n            fontSize={12}\n            tickLine={false}\n            tickFormatter={(value) => `$${value}`}\n          />\n          <Tooltip\n            contentStyle={{\n              backgroundColor: \"hsl(var(--popover))\",\n              border: \"1px solid hsl(var(--border))\",\n              borderRadius: \"0.375rem\",\n              padding: \"8px 12px\",\n            }}\n            labelStyle={{ color: \"hsl(var(--foreground))\", fontWeight: 600 }}\n            itemStyle={{ color: \"hsl(var(--primary))\" }}\n            formatter={(value: number) => [`$${value.toFixed(2)}`, \"Cumulative Savings\"]}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"savings\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth={2}\n            fill=\"url(#savingsGradient)\"\n            dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\n            activeDot={{ r: 6 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":3124},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer } from \"ws\";\nimport OpenAI from \"openai\";\nimport { storage } from \"./storage\";\nimport {\n  swapSimulationRequestSchema,\n  swapExecutionRequestSchema,\n  type Transaction,\n  type InsertTransaction,\n  type InsertRouteComparison,\n  type InsertRiskAnalysis,\n  type InsertProofOfRoute,\n  type Batch,\n  type InsertBatch,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport crypto from \"crypto\";\n\n// OpenRouter AI integration - Using Claude 3.5 Sonnet for MEV risk analysis\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n  defaultHeaders: {\n    \"HTTP-Referer\": \"https://zephyra.app\", // Optional: your app URL\n    \"X-Title\": \"Zephyra MEV Protection\", // Optional: app name shown in OpenRouter dashboard\n  }\n});\n\n// WebSocket clients map for real-time updates\nconst wsClients = new Map<string, Set<any>>();\n\n// Helper function to broadcast transaction updates\nfunction broadcastUpdate(walletAddress: string, data: any) {\n  const clients = wsClients.get(walletAddress);\n  if (clients) {\n    clients.forEach((client) => {\n      if (client.readyState === 1) { // WebSocket.OPEN\n        client.send(JSON.stringify(data));\n      }\n    });\n  }\n}\n\n// Batch configuration\nconst BATCH_SIZE_THRESHOLD = 5; // Execute when batch has 5 transactions\nconst BATCH_TIME_THRESHOLD = 30000; // Execute after 30 seconds if not full\n\n// Helper: Get or create a pending batch\nasync function getOrCreateBatch(): Promise<Batch> {\n  // Try to find existing pending batch\n  let batch = await storage.getPendingBatch();\n  \n  if (!batch) {\n    // Create new batch\n    const batchHash = crypto.createHash('sha256')\n      .update(`batch-${Date.now()}-${crypto.randomBytes(16).toString('hex')}`)\n      .digest('hex');\n    \n    const batchData: InsertBatch = {\n      status: \"pending\",\n      transactionCount: 0,\n      totalValue: \"0\",\n      batchHash,\n    };\n    \n    batch = await storage.createBatch(batchData);\n    \n    // Schedule automatic batch execution after time threshold\n    setTimeout(async () => {\n      try {\n        const currentBatch = await storage.getBatch(batch.id);\n        if (currentBatch && currentBatch.status === \"pending\") {\n          await executeBatch(batch.id);\n        }\n      } catch (error) {\n        console.error(\"Batch auto-execution error:\", error);\n      }\n    }, BATCH_TIME_THRESHOLD);\n  }\n  \n  return batch;\n}\n\n// Helper: Execute a batch of transactions\nasync function executeBatch(batchId: string) {\n  try {\n    const batch = await storage.getBatch(batchId);\n    if (!batch || batch.status !== \"pending\") return;\n    \n    // Mark batch as processing\n    await storage.updateBatch(batchId, { \n      status: \"processing\",\n      executedAt: new Date(),\n    });\n    \n    // Get all transactions in this batch\n    const batchTransactions = await storage.getBatchTransactions(batchId);\n    \n    if (batchTransactions.length === 0) {\n      await storage.updateBatch(batchId, { \n        status: \"completed\",\n        completedAt: new Date(),\n      });\n      return;\n    }\n    \n    console.log(`Executing batch ${batchId} with ${batchTransactions.length} transactions`);\n    \n    // Simulate batch execution (in production, this would use MagicBlock)\n    const executionStart = Date.now();\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const executionTime = Date.now() - executionStart;\n    \n    // Mark batch as completed\n    await storage.updateBatch(batchId, { \n      status: \"completed\",\n      executionTime,\n      completedAt: new Date(),\n    });\n    \n    // Broadcast batch completion to all wallet subscribers\n    for (const tx of batchTransactions) {\n      broadcastUpdate(tx.walletAddress, {\n        type: \"batch_executed\",\n        batchId,\n        transactionId: tx.id,\n        message: `Batch execution complete`,\n      });\n    }\n    \n    console.log(`Batch ${batchId} completed in ${executionTime}ms`);\n  } catch (error) {\n    console.error(\"Batch execution error:\", error);\n    await storage.updateBatch(batchId, { \n      status: \"failed\",\n      completedAt: new Date(),\n    });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Set up WebSocket server for real-time transaction updates\n  const wss = new WebSocketServer({ server: httpServer, path: \"/ws\" });\n  \n  wss.on(\"connection\", (ws, req) => {\n    console.log(\"WebSocket client connected\");\n    \n    ws.on(\"message\", (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        if (data.type === \"subscribe\" && data.walletAddress) {\n          // Subscribe client to wallet updates\n          if (!wsClients.has(data.walletAddress)) {\n            wsClients.set(data.walletAddress, new Set());\n          }\n          wsClients.get(data.walletAddress)!.add(ws);\n          console.log(`Client subscribed to wallet: ${data.walletAddress}`);\n        }\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    });\n    \n    ws.on(\"close\", () => {\n      // Remove client from all subscriptions\n      wsClients.forEach((clients) => clients.delete(ws));\n      console.log(\"WebSocket client disconnected\");\n    });\n  });\n\n  // POST /api/simulate - Simulate swap with AI risk analysis and route comparison\n  app.post(\"/api/simulate\", async (req, res) => {\n    try {\n      const parsed = swapSimulationRequestSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: fromZodError(parsed.error).toString() });\n      }\n\n      const { walletAddress, inputToken, outputToken, inputAmount } = parsed.data;\n      \n      broadcastUpdate(walletAddress, { \n        type: \"status\", \n        status: \"simulating\",\n        message: \"Starting transaction simulation...\" \n      });\n\n      // Simulate different DEX routes (Jupiter, Raydium, Orca)\n      const routes = await simulateRoutes(inputToken, outputToken, inputAmount);\n      \n      broadcastUpdate(walletAddress, { \n        type: \"status\", \n        status: \"analyzing\",\n        message: \"Analyzing MEV risk with AI...\" \n      });\n\n      // Get AI risk analysis from OpenAI\n      const riskAnalysis = await analyzeRiskWithAI(inputToken, outputToken, inputAmount, routes);\n      \n      // Select best route (lowest MEV risk + best price)\n      const selectedRoute = routes.reduce((best, current) => \n        (current.mevRisk < best.mevRisk || \n         (current.mevRisk === best.mevRisk && parseFloat(current.estimatedOutput) > parseFloat(best.estimatedOutput)))\n          ? current : best\n      );\n\n      // Calculate potential savings (protected route output - unprotected route output)\n      const worstRoute = routes.reduce((worst, current) => \n        current.mevRisk > worst.mevRisk ? current : worst\n      );\n      const potentialSavings = Math.abs(parseFloat(selectedRoute.estimatedOutput) - parseFloat(worstRoute.estimatedOutput)) * 10; // Realistic savings estimate\n\n      // Get or create batch for this transaction\n      const batch = await getOrCreateBatch();\n\n      // Generate proof hash\n      const proofHash = crypto.createHash('sha256')\n        .update(`${walletAddress}-${inputToken}-${outputToken}-${inputAmount}-${Date.now()}`)\n        .digest('hex');\n\n      // Create transaction record and add to batch\n      const transactionData: InsertTransaction = {\n        walletAddress,\n        inputToken,\n        outputToken,\n        inputAmount,\n        outputAmount: selectedRoute.estimatedOutput,\n        riskScore: riskAnalysis.score,\n        riskLevel: riskAnalysis.level,\n        selectedRoute: selectedRoute.dex,\n        alternativeRoutes: routes,\n        mevDetected: riskAnalysis.score > 30,\n        potentialSavings: potentialSavings.toFixed(2),\n        actualSavings: \"0\",\n        status: \"simulating\",\n        executionTime: 0,\n        batchId: batch.id, // Assign to batch\n        proofHash,\n        proofData: {\n          routes,\n          riskAnalysis,\n          selectedRoute: selectedRoute.dex,\n          timestamp: new Date().toISOString(),\n          batchId: batch.id,\n        },\n      };\n\n      const transaction = await storage.createTransaction(transactionData);\n\n      // Get actual transaction count from database (atomic - prevents race conditions)\n      const batchTransactions = await storage.getBatchTransactions(batch.id);\n      const actualCount = batchTransactions.length;\n      const actualTotalValue = batchTransactions.reduce((sum, tx) => \n        sum + parseFloat(tx.inputAmount), 0\n      ).toFixed(2);\n\n      // Update batch with actual counts\n      await storage.updateBatch(batch.id, {\n        transactionCount: actualCount,\n        totalValue: actualTotalValue,\n      });\n\n      // Check if batch should be executed now (reached size threshold)\n      if (actualCount >= BATCH_SIZE_THRESHOLD) {\n        // Execute batch asynchronously\n        executeBatch(batch.id).catch(err => console.error(\"Batch execution error:\", err));\n      }\n\n      // Store route comparisons\n      for (const route of routes) {\n        const routeData: InsertRouteComparison = {\n          transactionId: transaction.id,\n          dex: route.dex,\n          estimatedOutput: route.estimatedOutput,\n          priceImpact: route.priceImpact,\n          slippage: route.slippage,\n          mevRisk: route.mevRisk,\n          liquidityDepth: route.liquidityDepth,\n          latency: route.latency,\n          gasEstimate: route.gasEstimate,\n          selected: route.dex === selectedRoute.dex,\n        };\n        await storage.createRouteComparison(routeData);\n      }\n\n      // Store risk analysis\n      const riskData: InsertRiskAnalysis = {\n        transactionId: transaction.id,\n        aiModel: \"anthropic/claude-3.5-sonnet\",\n        riskScore: riskAnalysis.score,\n        riskFactors: riskAnalysis.factors,\n        sandwichAttackProbability: riskAnalysis.sandwichAttackProbability,\n        frontRunningRisk: riskAnalysis.frontRunningRisk,\n        poolVolatility: riskAnalysis.poolVolatility,\n        recommendedAction: riskAnalysis.recommendedAction,\n        reasoning: riskAnalysis.reasoning,\n      };\n      await storage.createRiskAnalysis(riskData);\n\n      broadcastUpdate(walletAddress, { \n        type: \"simulation_complete\",\n        transaction,\n        message: \"Simulation complete!\" \n      });\n\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Simulation error:\", error);\n      res.status(500).json({ error: \"Simulation failed\" });\n    }\n  });\n\n  // POST /api/execute - Execute protected swap\n  app.post(\"/api/execute\", async (req, res) => {\n    try {\n      const parsed = swapExecutionRequestSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ error: fromZodError(parsed.error).toString() });\n      }\n\n      const { transactionId, useProtectedRoute } = parsed.data;\n      \n      const transaction = await storage.getTransaction(transactionId);\n      if (!transaction) {\n        return res.status(404).json({ error: \"Transaction not found\" });\n      }\n\n      broadcastUpdate(transaction.walletAddress, { \n        type: \"status\", \n        status: \"executing\",\n        message: \"Executing protected swap...\" \n      });\n\n      // Simulate execution time (in production this would interact with MagicBlock)\n      const executionStart = Date.now();\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      const executionTime = Date.now() - executionStart;\n\n      // Calculate actual savings\n      const actualSavings = useProtectedRoute \n        ? parseFloat(transaction.potentialSavings)\n        : 0;\n\n      // Update transaction\n      const updated = await storage.updateTransaction(transactionId, {\n        status: \"completed\",\n        executionTime,\n        actualSavings: actualSavings.toFixed(2),\n        completedAt: new Date(),\n      });\n\n      // Create proof of route\n      const proofData: InsertProofOfRoute = {\n        transactionId,\n        proofHash: transaction.proofHash,\n        routesConsidered: transaction.alternativeRoutes,\n        selectionReasoning: {\n          selectedDex: transaction.selectedRoute,\n          reason: \"Lowest MEV risk with best price execution\",\n          alternatives: transaction.alternativeRoutes,\n        },\n        mevDetectionLog: [{\n          timestamp: transaction.createdAt,\n          threats: transaction.mevDetected ? [\"sandwich_attack\", \"front_running\"] : [],\n          severity: transaction.riskLevel,\n        }],\n        protectionMeasures: useProtectedRoute ? [\n          \"ephemeral_rollup_simulation\",\n          \"route_optimization\",\n          \"mev_protection_layer\",\n        ] : [],\n        simulationTime: 500,\n        routeSelectionTime: 300,\n        executionTime,\n        totalTime: executionTime + 800,\n        blockchainTxSignature: `${crypto.randomBytes(32).toString('hex')}`, // Mock Solana signature\n        verificationUrl: `https://explorer.solana.com/tx/${crypto.randomBytes(32).toString('hex')}`,\n      };\n      await storage.createProofOfRoute(proofData);\n\n      // Update user stats\n      const stats = await storage.getUserStats(transaction.walletAddress);\n      if (stats) {\n        const newTotal = parseFloat(stats.totalSavings) + actualSavings;\n        const newCount = stats.totalTransactions + 1;\n        const newAvg = newTotal / newCount;\n        \n        const riskUpdates: any = {};\n        if (transaction.riskScore <= 30) riskUpdates.lowRiskCount = stats.lowRiskCount + 1;\n        else if (transaction.riskScore <= 70) riskUpdates.mediumRiskCount = stats.mediumRiskCount + 1;\n        else if (transaction.riskScore <= 90) riskUpdates.highRiskCount = stats.highRiskCount + 1;\n        else riskUpdates.criticalRiskCount = stats.criticalRiskCount + 1;\n\n        await storage.updateUserStats(transaction.walletAddress, {\n          totalTransactions: newCount,\n          totalSavings: newTotal.toFixed(2),\n          averageSavings: newAvg.toFixed(2),\n          mevAttacksBlocked: transaction.mevDetected ? stats.mevAttacksBlocked + 1 : stats.mevAttacksBlocked,\n          protectedRouteCount: useProtectedRoute ? stats.protectedRouteCount + 1 : stats.protectedRouteCount,\n          directRouteCount: !useProtectedRoute ? stats.directRouteCount + 1 : stats.directRouteCount,\n          lastTransactionAt: new Date(),\n          ...riskUpdates,\n        });\n      } else {\n        // Create new stats\n        const riskCounts = {\n          lowRiskCount: transaction.riskScore <= 30 ? 1 : 0,\n          mediumRiskCount: transaction.riskScore > 30 && transaction.riskScore <= 70 ? 1 : 0,\n          highRiskCount: transaction.riskScore > 70 && transaction.riskScore <= 90 ? 1 : 0,\n          criticalRiskCount: transaction.riskScore > 90 ? 1 : 0,\n        };\n\n        await storage.createUserStats({\n          walletAddress: transaction.walletAddress,\n          totalTransactions: 1,\n          totalSavings: actualSavings.toFixed(2),\n          averageSavings: actualSavings.toFixed(2),\n          mevAttacksBlocked: transaction.mevDetected ? 1 : 0,\n          protectedRouteCount: useProtectedRoute ? 1 : 0,\n          directRouteCount: !useProtectedRoute ? 1 : 0,\n          lastTransactionAt: new Date(),\n          ...riskCounts,\n        });\n      }\n\n      broadcastUpdate(transaction.walletAddress, { \n        type: \"execution_complete\",\n        transaction: updated,\n        message: `Transaction completed! Saved $${actualSavings}` \n      });\n\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Execution error:\", error);\n      res.status(500).json({ error: \"Execution failed\" });\n    }\n  });\n\n  // GET /api/transactions/:walletAddress - Get transaction history\n  app.get(\"/api/transactions/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      const transactions = await storage.getTransactionsByWallet(walletAddress);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Get transactions error:\", error);\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // GET /api/stats/:walletAddress - Get user statistics\n  app.get(\"/api/stats/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      const stats = await storage.getUserStats(walletAddress);\n      \n      if (!stats) {\n        // Return default stats for new users\n        return res.json({\n          walletAddress,\n          totalTransactions: 0,\n          totalSavings: \"0\",\n          averageSavings: \"0\",\n          lowRiskCount: 0,\n          mediumRiskCount: 0,\n          highRiskCount: 0,\n          criticalRiskCount: 0,\n          mevAttacksBlocked: 0,\n          protectedRouteCount: 0,\n          directRouteCount: 0,\n        });\n      }\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get stats error:\", error);\n      res.status(500).json({ error: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // GET /api/proof/:transactionId - Get proof of route\n  app.get(\"/api/proof/:transactionId\", async (req, res) => {\n    try {\n      const { transactionId } = req.params;\n      const proof = await storage.getProofOfRoute(transactionId);\n      \n      if (!proof) {\n        return res.status(404).json({ error: \"Proof not found\" });\n      }\n      \n      res.json(proof);\n    } catch (error) {\n      console.error(\"Get proof error:\", error);\n      res.status(500).json({ error: \"Failed to fetch proof\" });\n    }\n  });\n\n  // ============================================================================\n  // API KEY MANAGEMENT ENDPOINTS\n  // ============================================================================\n\n  // POST /api/keys - Generate new API key (requires wallet authentication)\n  app.post(\"/api/keys\", async (req, res) => {\n    try {\n      const { walletAddress, name } = req.body;\n      \n      if (!walletAddress || !name) {\n        return res.status(400).json({ error: \"Missing walletAddress or name\" });\n      }\n\n      // TODO: Add proper wallet signature verification here\n      // For now, we trust the walletAddress from request body\n      // In production, verify wallet ownership via signature\n\n      // Generate secure API key (64 random hex chars)\n      const rawKey = crypto.randomBytes(32).toString(\"hex\");\n      const apiKey = `zeph_${rawKey}`;\n      \n      // Hash the key for storage (only hash is stored, not plaintext)\n      const keyHash = crypto.createHash(\"sha256\").update(apiKey).digest(\"hex\");\n      \n      const keyData = await storage.createApiKey({\n        key: keyHash, // Store hashed key\n        name,\n        walletAddress,\n        requestsPerMinute: 60,\n        requestsToday: 0,\n        active: true,\n      });\n\n      // Return plaintext key ONLY on creation (won't be shown again)\n      res.json({\n        id: keyData.id,\n        key: apiKey, // Full plaintext key shown only once\n        name: keyData.name,\n        requestsPerMinute: keyData.requestsPerMinute,\n        createdAt: keyData.createdAt,\n        message: \"⚠️ Save this key securely - it won't be shown again!\"\n      });\n    } catch (error) {\n      console.error(\"Create API key error:\", error);\n      res.status(500).json({ error: \"Failed to create API key\" });\n    }\n  });\n\n  // GET /api/keys/:walletAddress - List API keys for wallet (requires ownership)\n  app.get(\"/api/keys/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      \n      // TODO: Add proper wallet signature verification\n      // Verify that requester owns this wallet address\n      \n      const keys = await storage.getApiKeysByWallet(walletAddress);\n      \n      // Never expose key hashes - return only safe metadata\n      const sanitized = keys.map(k => ({\n        id: k.id,\n        name: k.name,\n        active: k.active,\n        requestsPerMinute: k.requestsPerMinute,\n        requestsToday: k.requestsToday,\n        lastRequestAt: k.lastRequestAt,\n        createdAt: k.createdAt,\n        expiresAt: k.expiresAt,\n        // No key preview since we only store hashes\n      }));\n      \n      res.json(sanitized);\n    } catch (error) {\n      console.error(\"List API keys error:\", error);\n      res.status(500).json({ error: \"Failed to list API keys\" });\n    }\n  });\n\n  // DELETE /api/keys/:id - Revoke API key (requires ownership)\n  app.delete(\"/api/keys/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { walletAddress } = req.body;\n      \n      if (!walletAddress) {\n        return res.status(400).json({ error: \"Missing walletAddress\" });\n      }\n      \n      // TODO: Add proper wallet signature verification\n      // Verify that requester owns the wallet that created this key\n      \n      // Verify ownership before deletion\n      const keys = await storage.getApiKeysByWallet(walletAddress);\n      const keyToDelete = keys.find(k => k.id === id);\n      \n      if (!keyToDelete) {\n        return res.status(404).json({ error: \"API key not found or not owned by this wallet\" });\n      }\n      \n      await storage.deleteApiKey(id);\n      res.json({ message: \"API key revoked successfully\" });\n    } catch (error) {\n      console.error(\"Delete API key error:\", error);\n      res.status(500).json({ error: \"Failed to revoke API key\" });\n    }\n  });\n\n  // ============================================================================\n  // ZEPHYRA SDK PUBLIC API - For third-party developers\n  // ============================================================================\n\n  // POST /api/sdk/simulate - Simulate MEV-protected swap (authenticated)\n  app.post(\"/api/sdk/simulate\", authenticateSDK, async (req, res) => {\n    try {\n      const validation = swapSimulationRequestSchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        const error = fromZodError(validation.error);\n        return res.status(400).json({ error: error.message });\n      }\n\n      const { inputToken, outputToken, inputAmount } = validation.data;\n      const walletAddress = (req as any).walletAddress;\n\n      // Simulate routes\n      const routes = await simulateRoutes(inputToken, outputToken, inputAmount);\n      const riskAnalysis = await analyzeRiskWithAI(inputToken, outputToken, inputAmount, routes);\n      \n      const selectedRoute = routes.reduce((best, current) => \n        (current.mevRisk < best.mevRisk || \n         (current.mevRisk === best.mevRisk && parseFloat(current.estimatedOutput) > parseFloat(best.estimatedOutput)))\n          ? current \n          : best\n      );\n\n      res.json({\n        walletAddress,\n        inputToken,\n        outputToken,\n        inputAmount,\n        routes: routes.map(r => ({\n          dex: r.dex,\n          estimatedOutput: r.estimatedOutput,\n          mevRisk: r.mevRisk,\n          priceImpact: r.priceImpact,\n          latency: r.latency,\n          selected: r.dex === selectedRoute.dex\n        })),\n        selectedRoute: selectedRoute.dex,\n        riskScore: riskAnalysis.score,\n        riskLevel: riskAnalysis.level,\n        potentialSavings: calculateSavings(routes, selectedRoute),\n        reasoning: riskAnalysis.reasoning,\n      });\n    } catch (error) {\n      console.error(\"SDK simulate error:\", error);\n      res.status(500).json({ error: \"Simulation failed\" });\n    }\n  });\n\n  // POST /api/sdk/execute - Execute MEV-protected swap (authenticated)\n  app.post(\"/api/sdk/execute\", authenticateSDK, async (req, res) => {\n    try {\n      const validation = swapExecutionRequestSchema.safeParse(req.body);\n      \n      if (!validation.success) {\n        const error = fromZodError(validation.error);\n        return res.status(400).json({ error: error.message });\n      }\n\n      const walletAddress = (req as any).walletAddress;\n      const transactionData = validation.data;\n\n      // Create transaction record\n      const transaction = await storage.createTransaction({\n        walletAddress,\n        ...transactionData,\n        status: \"completed\",\n        completedAt: new Date(),\n      });\n\n      res.json({\n        transactionId: transaction.id,\n        status: \"completed\",\n        proofHash: transaction.proofHash,\n        actualSavings: transaction.actualSavings,\n        executionTime: transaction.executionTime,\n      });\n    } catch (error) {\n      console.error(\"SDK execute error:\", error);\n      res.status(500).json({ error: \"Execution failed\" });\n    }\n  });\n\n  // GET /api/sdk/risk-analysis/:transactionId - Get detailed risk analysis (authenticated)\n  app.get(\"/api/sdk/risk-analysis/:transactionId\", authenticateSDK, async (req, res) => {\n    try {\n      const { transactionId } = req.params;\n      const riskAnalysis = await storage.getRiskAnalysis(transactionId);\n      \n      if (!riskAnalysis) {\n        return res.status(404).json({ error: \"Risk analysis not found\" });\n      }\n      \n      res.json(riskAnalysis);\n    } catch (error) {\n      console.error(\"SDK risk analysis error:\", error);\n      res.status(500).json({ error: \"Failed to fetch risk analysis\" });\n    }\n  });\n\n  return httpServer;\n}\n\n// Helper: Calculate savings from route selection\nfunction calculateSavings(routes: any[], selectedRoute: any): string {\n  const selectedOutput = parseFloat(selectedRoute.estimatedOutput);\n  const worstOutput = Math.min(...routes.map(r => parseFloat(r.estimatedOutput)));\n  const savings = Math.abs(selectedOutput - worstOutput) * 10; // Mock USD conversion\n  return savings.toFixed(2);\n}\n\n// Helper: Simulate routes across different DEXs\nfunction simulateRoutes(inputToken: string, outputToken: string, inputAmount: string) {\n  const amount = parseFloat(inputAmount);\n  \n  // Simulate Jupiter route\n  const jupiterRoute = {\n    dex: \"jupiter\",\n    estimatedOutput: (amount * 0.998 * (Math.random() * 0.02 + 0.99)).toFixed(4),\n    priceImpact: (Math.random() * 0.5 + 0.1).toFixed(2),\n    slippage: (Math.random() * 0.3 + 0.1).toFixed(2),\n    mevRisk: Math.floor(Math.random() * 30 + 10), // 10-40\n    liquidityDepth: (Math.random() * 5000000 + 1000000).toFixed(0),\n    latency: Math.floor(Math.random() * 200 + 100),\n    gasEstimate: (Math.random() * 0.001 + 0.0005).toFixed(4),\n  };\n\n  // Simulate Raydium route\n  const raydiumRoute = {\n    dex: \"raydium\",\n    estimatedOutput: (amount * 0.997 * (Math.random() * 0.02 + 0.99)).toFixed(4),\n    priceImpact: (Math.random() * 0.6 + 0.15).toFixed(2),\n    slippage: (Math.random() * 0.4 + 0.15).toFixed(2),\n    mevRisk: Math.floor(Math.random() * 40 + 20), // 20-60\n    liquidityDepth: (Math.random() * 3000000 + 500000).toFixed(0),\n    latency: Math.floor(Math.random() * 250 + 150),\n    gasEstimate: (Math.random() * 0.0015 + 0.0006).toFixed(4),\n  };\n\n  // Simulate Orca route\n  const orcaRoute = {\n    dex: \"orca\",\n    estimatedOutput: (amount * 0.996 * (Math.random() * 0.02 + 0.99)).toFixed(4),\n    priceImpact: (Math.random() * 0.7 + 0.2).toFixed(2),\n    slippage: (Math.random() * 0.5 + 0.2).toFixed(2),\n    mevRisk: Math.floor(Math.random() * 35 + 15), // 15-50\n    liquidityDepth: (Math.random() * 4000000 + 800000).toFixed(0),\n    latency: Math.floor(Math.random() * 220 + 120),\n    gasEstimate: (Math.random() * 0.0012 + 0.0007).toFixed(4),\n  };\n\n  return [jupiterRoute, raydiumRoute, orcaRoute];\n}\n\n// Helper: Analyze MEV risk using AI via OpenRouter\nasync function analyzeRiskWithAI(\n  inputToken: string, \n  outputToken: string, \n  inputAmount: string,\n  routes: any[]\n) {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"anthropic/claude-3.5-sonnet\", // Using Claude 3.5 Sonnet via OpenRouter\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert DeFi security analyst specializing in MEV (Maximal Extractable Value) attack detection on Solana. Analyze swap transactions and provide risk scores from 0-100.\"\n        },\n        {\n          role: \"user\",\n          content: `Analyze this Solana swap for MEV risks:\n- Swap: ${inputAmount} ${inputToken} → ${outputToken}\n- Route options: ${JSON.stringify(routes, null, 2)}\n\nProvide a JSON response with:\n{\n  \"score\": <0-100 integer>,\n  \"level\": \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\",\n  \"factors\": [\"list\", \"of\", \"risk\", \"factors\"],\n  \"sandwichAttackProbability\": <0-100 integer>,\n  \"frontRunningRisk\": <0-100 integer>,\n  \"poolVolatility\": <0-100 integer>,\n  \"recommendedAction\": \"protect\" | \"direct\" | \"wait\",\n  \"reasoning\": \"brief explanation\"\n}`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(completion.choices[0].message.content || \"{}\");\n    \n    // Validate and provide defaults\n    return {\n      score: result.score || 50,\n      level: result.level || \"MEDIUM\",\n      factors: result.factors || [\"Unknown risk factors\"],\n      sandwichAttackProbability: result.sandwichAttackProbability || 40,\n      frontRunningRisk: result.frontRunningRisk || 30,\n      poolVolatility: result.poolVolatility || 35,\n      recommendedAction: result.recommendedAction || \"protect\",\n      reasoning: result.reasoning || \"AI analysis completed\",\n    };\n  } catch (error) {\n    console.error(\"AI risk analysis error:\", error);\n    // Fallback to simple rule-based analysis\n    const avgMevRisk = routes.reduce((sum, r) => sum + r.mevRisk, 0) / routes.length;\n    return {\n      score: Math.floor(avgMevRisk),\n      level: avgMevRisk <= 30 ? \"LOW\" : avgMevRisk <= 60 ? \"MEDIUM\" : avgMevRisk <= 85 ? \"HIGH\" : \"CRITICAL\",\n      factors: [\"High liquidity pool\", \"Price volatility detected\"],\n      sandwichAttackProbability: Math.floor(avgMevRisk * 0.8),\n      frontRunningRisk: Math.floor(avgMevRisk * 0.6),\n      poolVolatility: Math.floor(avgMevRisk * 0.7),\n      recommendedAction: avgMevRisk > 50 ? \"protect\" : \"direct\",\n      reasoning: \"Automated risk assessment based on route analysis\",\n    };\n  }\n}\n\n// Middleware: Authenticate SDK API requests via API key\nasync function authenticateSDK(req: any, res: any, next: any) {\n  try {\n    const apiKey = req.headers[\"x-api-key\"] || req.headers[\"authorization\"]?.replace(\"Bearer \", \"\");\n    \n    if (!apiKey) {\n      return res.status(401).json({ \n        error: \"Missing API key\",\n        message: \"Include X-API-Key header or Authorization: Bearer <key>\" \n      });\n    }\n\n    // Hash the incoming key to compare with stored hash\n    const keyHash = crypto.createHash(\"sha256\").update(apiKey as string).digest(\"hex\");\n    const keyData = await storage.getApiKey(keyHash);\n    \n    if (!keyData) {\n      return res.status(401).json({ \n        error: \"Invalid API key\",\n        message: \"API key not found or inactive\" \n      });\n    }\n\n    // Check expiration\n    if (keyData.expiresAt && new Date(keyData.expiresAt) < new Date()) {\n      return res.status(401).json({ \n        error: \"API key expired\",\n        message: \"Please generate a new API key\" \n      });\n    }\n\n    // Simple rate limiting (requests per minute)\n    const now = new Date();\n    const lastRequest = keyData.lastRequestAt ? new Date(keyData.lastRequestAt) : null;\n    \n    if (lastRequest) {\n      const secondsSinceLastRequest = (now.getTime() - lastRequest.getTime()) / 1000;\n      if (secondsSinceLastRequest < 60 / keyData.requestsPerMinute) {\n        return res.status(429).json({ \n          error: \"Rate limit exceeded\",\n          message: `Max ${keyData.requestsPerMinute} requests per minute`,\n          retryAfter: Math.ceil(60 / keyData.requestsPerMinute - secondsSinceLastRequest)\n        });\n      }\n    }\n\n    // Update rate limit counters\n    await storage.updateApiKey(keyData.id, {\n      lastRequestAt: now,\n      requestsToday: keyData.requestsToday + 1,\n    });\n\n    // Attach wallet address to request\n    (req as any).walletAddress = keyData.walletAddress;\n    (req as any).apiKeyId = keyData.id;\n    \n    next();\n  } catch (error) {\n    console.error(\"SDK authentication error:\", error);\n    return res.status(500).json({ error: \"Authentication failed\" });\n  }\n}\n","size_bytes":31924},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/risk-gauge.tsx":{"content":"import { AlertTriangle, Shield, AlertCircle, Info } from \"lucide-react\";\n\ninterface RiskGaugeProps {\n  score: number;\n  level: \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\";\n}\n\nexport function RiskGauge({ score, level }: RiskGaugeProps) {\n  const getColor = () => {\n    if (score <= 30) return \"text-green-600 dark:text-green-400\";\n    if (score <= 70) return \"text-yellow-600 dark:text-yellow-400\";\n    if (score <= 90) return \"text-orange-600 dark:text-orange-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getBgColor = () => {\n    if (score <= 30) return \"bg-green-500\";\n    if (score <= 70) return \"bg-yellow-500\";\n    if (score <= 90) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getIcon = () => {\n    if (score <= 30) return <Shield className=\"w-5 h-5\" />;\n    if (score <= 70) return <Info className=\"w-5 h-5\" />;\n    if (score <= 90) return <AlertCircle className=\"w-5 h-5\" />;\n    return <AlertTriangle className=\"w-5 h-5\" />;\n  };\n\n  const getLevelText = () => {\n    switch (level) {\n      case \"LOW\":\n        return \"Low Risk - Direct execution recommended\";\n      case \"MEDIUM\":\n        return \"Medium Risk - Protection available\";\n      case \"HIGH\":\n        return \"High Risk - Protected route recommended\";\n      case \"CRITICAL\":\n        return \"Critical Risk - MEV attack likely\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"risk-gauge\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`${getColor()}`}>\n            {getIcon()}\n          </div>\n          <div>\n            <div className=\"text-sm font-medium text-muted-foreground\">Risk Score</div>\n            <div className={`text-2xl font-mono font-semibold ${getColor()}`} data-testid=\"text-risk-score\">\n              {score}/100\n            </div>\n          </div>\n        </div>\n        <div className={`px-3 py-1 rounded-full text-sm font-medium ${getColor()} bg-current/10`} data-testid=\"badge-risk-level\">\n          {level}\n        </div>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"space-y-2\">\n        <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n          <div\n            className={`h-full ${getBgColor()} transition-all duration-500 ease-out`}\n            style={{ width: `${score}%` }}\n            data-testid=\"progress-risk-bar\"\n          />\n        </div>\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <span>0</span>\n          <span>25</span>\n          <span>50</span>\n          <span>75</span>\n          <span>100</span>\n        </div>\n      </div>\n\n      {/* Description */}\n      <div className=\"text-sm text-muted-foreground\" data-testid=\"text-risk-description\">\n        {getLevelText()}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2831},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Shield, TrendingUp, Activity, Eye, ArrowLeft, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { TransactionHistory } from \"@/components/transaction-history\";\nimport { SavingsChart } from \"@/components/savings-chart\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport type { UserStats, Transaction } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [walletAddress] = useState(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"); // Mock for demo\n\n  // Connect WebSocket for real-time updates\n  const { isConnected } = useWebSocket({ walletAddress });\n\n  // Fetch user stats\n  const { data: stats, isLoading: statsLoading } = useQuery<UserStats>({\n    queryKey: ['/api/stats', walletAddress],\n  });\n\n  // Fetch transaction history\n  const { data: transactions, isLoading: txLoading } = useQuery<Transaction[]>({\n    queryKey: ['/api/transactions', walletAddress],\n  });\n\n  const isLoading = statsLoading || txLoading;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-6 h-16 flex items-center justify-between\">\n          <Link href=\"/\">\n            <span className=\"flex items-center gap-2 hover:opacity-80 transition-opacity cursor-pointer\" data-testid=\"link-logo-home\">\n              <Shield className=\"w-6 h-6 text-primary\" />\n              <span className=\"font-sans font-semibold text-xl tracking-tight\">Zephyra</span>\n            </span>\n          </Link>\n          <div className=\"flex items-center gap-4\">\n            {isConnected && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\" data-testid=\"status-websocket\">\n                <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n                <span>Live</span>\n              </div>\n            )}\n            <Link href=\"/swap\">\n              <Button data-testid=\"button-new-swap\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Swap\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"pt-24 pb-12 px-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <Link href=\"/\">\n              <span className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground mb-4 cursor-pointer\" data-testid=\"link-back-home\">\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back to Home\n              </span>\n            </Link>\n            <h1 className=\"text-4xl font-semibold mb-2\" data-testid=\"heading-dashboard\">Dashboard</h1>\n            <p className=\"text-muted-foreground\">\n              Track your savings and transaction history\n            </p>\n          </div>\n\n          {/* Stats Grid */}\n          <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n            <Card className=\"p-6\" data-testid=\"card-total-savings\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div>\n                  <div className=\"text-sm font-medium text-muted-foreground mb-1\">Total Savings</div>\n                  {isLoading ? (\n                    <div className=\"h-10 w-32 bg-muted animate-pulse rounded\" />\n                  ) : (\n                    <div className=\"text-3xl font-mono font-semibold text-primary\" data-testid=\"text-total-savings\">\n                      ${stats?.totalSavings || \"0\"}\n                    </div>\n                  )}\n                </div>\n                <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                </div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {isLoading ? (\n                  <div className=\"h-4 w-24 bg-muted animate-pulse rounded\" />\n                ) : (\n                  <span>\n                    {stats?.totalTransactions || 0} transactions protected\n                  </span>\n                )}\n              </div>\n            </Card>\n\n            <Card className=\"p-6\" data-testid=\"card-avg-savings\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div>\n                  <div className=\"text-sm font-medium text-muted-foreground mb-1\">Avg. per Transaction</div>\n                  {isLoading ? (\n                    <div className=\"h-10 w-24 bg-muted animate-pulse rounded\" />\n                  ) : (\n                    <div className=\"text-3xl font-mono font-semibold\" data-testid=\"text-avg-savings\">\n                      ${stats?.averageSavings || \"0\"}\n                    </div>\n                  )}\n                </div>\n                <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                  <Activity className=\"w-5 h-5 text-primary\" />\n                </div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {isLoading ? (\n                  <div className=\"h-4 w-32 bg-muted animate-pulse rounded\" />\n                ) : (\n                  <span>\n                    10-15% average protection rate\n                  </span>\n                )}\n              </div>\n            </Card>\n\n            <Card className=\"p-6\" data-testid=\"card-mev-blocked\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div>\n                  <div className=\"text-sm font-medium text-muted-foreground mb-1\">MEV Attacks Blocked</div>\n                  {isLoading ? (\n                    <div className=\"h-10 w-20 bg-muted animate-pulse rounded\" />\n                  ) : (\n                    <div className=\"text-3xl font-mono font-semibold text-destructive\" data-testid=\"text-mev-blocked\">\n                      {stats?.mevAttacksBlocked || 0}\n                    </div>\n                  )}\n                </div>\n                <div className=\"w-10 h-10 rounded-lg bg-destructive/10 flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-destructive\" />\n                </div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {isLoading ? (\n                  <div className=\"h-4 w-28 bg-muted animate-pulse rounded\" />\n                ) : (\n                  <span>\n                    {stats?.protectedRouteCount || 0} protected routes used\n                  </span>\n                )}\n              </div>\n            </Card>\n          </div>\n\n          {/* Savings Chart */}\n          <Card className=\"p-6 mb-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h2 className=\"text-xl font-semibold\">Savings Over Time</h2>\n                <p className=\"text-sm text-muted-foreground\">Cumulative USD saved from MEV protection</p>\n              </div>\n              <Eye className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n            <SavingsChart transactions={transactions || []} isLoading={isLoading} />\n          </Card>\n\n          {/* Risk Distribution */}\n          <Card className=\"p-6 mb-8\">\n            <h2 className=\"text-xl font-semibold mb-6\">Risk Distribution</h2>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"h-12 bg-muted animate-pulse rounded\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"p-4 rounded-lg bg-green-500/10 border border-green-500/20\" data-testid=\"card-risk-low\">\n                  <div className=\"text-2xl font-mono font-semibold text-green-600 dark:text-green-400 mb-1\">\n                    {stats?.lowRiskCount || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Low Risk (0-30)</div>\n                </div>\n                <div className=\"p-4 rounded-lg bg-yellow-500/10 border border-yellow-500/20\" data-testid=\"card-risk-medium\">\n                  <div className=\"text-2xl font-mono font-semibold text-yellow-600 dark:text-yellow-400 mb-1\">\n                    {stats?.mediumRiskCount || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Medium (31-70)</div>\n                </div>\n                <div className=\"p-4 rounded-lg bg-orange-500/10 border border-orange-500/20\" data-testid=\"card-risk-high\">\n                  <div className=\"text-2xl font-mono font-semibold text-orange-600 dark:text-orange-400 mb-1\">\n                    {stats?.highRiskCount || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">High (71-90)</div>\n                </div>\n                <div className=\"p-4 rounded-lg bg-red-500/10 border border-red-500/20\" data-testid=\"card-risk-critical\">\n                  <div className=\"text-2xl font-mono font-semibold text-red-600 dark:text-red-400 mb-1\">\n                    {stats?.criticalRiskCount || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Critical (91-100)</div>\n                </div>\n              </div>\n            )}\n          </Card>\n\n          {/* Transaction History */}\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-6\">Transaction History</h2>\n            <TransactionHistory transactions={transactions || []} isLoading={isLoading} />\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9922},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<T = any>(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<T> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1398},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/storage.ts":{"content":"import { \n  transactions,\n  routeComparisons,\n  riskAnalyses,\n  proofOfRoutes,\n  userStats,\n  batches,\n  apiKeys,\n  type Transaction,\n  type InsertTransaction,\n  type RouteComparison,\n  type InsertRouteComparison,\n  type RiskAnalysis,\n  type InsertRiskAnalysis,\n  type ProofOfRoute,\n  type InsertProofOfRoute,\n  type UserStats,\n  type InsertUserStats,\n  type Batch,\n  type InsertBatch,\n  type ApiKey,\n  type InsertApiKey,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Transaction operations\n  createTransaction(data: InsertTransaction): Promise<Transaction>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  getTransactionsByWallet(walletAddress: string): Promise<Transaction[]>;\n  updateTransaction(id: string, data: Partial<Transaction>): Promise<Transaction>;\n\n  // Route comparison operations\n  createRouteComparison(data: InsertRouteComparison): Promise<RouteComparison>;\n  getRouteComparisons(transactionId: string): Promise<RouteComparison[]>;\n\n  // Risk analysis operations\n  createRiskAnalysis(data: InsertRiskAnalysis): Promise<RiskAnalysis>;\n  getRiskAnalysis(transactionId: string): Promise<RiskAnalysis | undefined>;\n\n  // Proof of route operations\n  createProofOfRoute(data: InsertProofOfRoute): Promise<ProofOfRoute>;\n  getProofOfRoute(transactionId: string): Promise<ProofOfRoute | undefined>;\n  getProofByHash(proofHash: string): Promise<ProofOfRoute | undefined>;\n\n  // User statistics operations\n  getUserStats(walletAddress: string): Promise<UserStats | undefined>;\n  createUserStats(data: InsertUserStats): Promise<UserStats>;\n  updateUserStats(walletAddress: string, data: Partial<UserStats>): Promise<UserStats>;\n\n  // Batch operations\n  createBatch(data: InsertBatch): Promise<Batch>;\n  getBatch(id: string): Promise<Batch | undefined>;\n  getPendingBatch(): Promise<Batch | undefined>;\n  updateBatch(id: string, data: Partial<Batch>): Promise<Batch>;\n  getBatchTransactions(batchId: string): Promise<Transaction[]>;\n\n  // API Key operations\n  createApiKey(data: InsertApiKey): Promise<ApiKey>;\n  getApiKey(key: string): Promise<ApiKey | undefined>;\n  getApiKeysByWallet(walletAddress: string): Promise<ApiKey[]>;\n  updateApiKey(id: string, data: Partial<ApiKey>): Promise<ApiKey>;\n  deleteApiKey(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Transaction operations\n  async createTransaction(data: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(data)\n      .returning();\n    return transaction;\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.id, id));\n    return transaction || undefined;\n  }\n\n  async getTransactionsByWallet(walletAddress: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.walletAddress, walletAddress))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async updateTransaction(id: string, data: Partial<Transaction>): Promise<Transaction> {\n    const [updated] = await db\n      .update(transactions)\n      .set(data)\n      .where(eq(transactions.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Route comparison operations\n  async createRouteComparison(data: InsertRouteComparison): Promise<RouteComparison> {\n    const [route] = await db\n      .insert(routeComparisons)\n      .values(data)\n      .returning();\n    return route;\n  }\n\n  async getRouteComparisons(transactionId: string): Promise<RouteComparison[]> {\n    return await db\n      .select()\n      .from(routeComparisons)\n      .where(eq(routeComparisons.transactionId, transactionId))\n      .orderBy(desc(routeComparisons.mevRisk));\n  }\n\n  // Risk analysis operations\n  async createRiskAnalysis(data: InsertRiskAnalysis): Promise<RiskAnalysis> {\n    const [risk] = await db\n      .insert(riskAnalyses)\n      .values(data)\n      .returning();\n    return risk;\n  }\n\n  async getRiskAnalysis(transactionId: string): Promise<RiskAnalysis | undefined> {\n    const [risk] = await db\n      .select()\n      .from(riskAnalyses)\n      .where(eq(riskAnalyses.transactionId, transactionId));\n    return risk || undefined;\n  }\n\n  // Proof of route operations\n  async createProofOfRoute(data: InsertProofOfRoute): Promise<ProofOfRoute> {\n    const [proof] = await db\n      .insert(proofOfRoutes)\n      .values(data)\n      .returning();\n    return proof;\n  }\n\n  async getProofOfRoute(transactionId: string): Promise<ProofOfRoute | undefined> {\n    const [proof] = await db\n      .select()\n      .from(proofOfRoutes)\n      .where(eq(proofOfRoutes.transactionId, transactionId));\n    return proof || undefined;\n  }\n\n  async getProofByHash(proofHash: string): Promise<ProofOfRoute | undefined> {\n    const [proof] = await db\n      .select()\n      .from(proofOfRoutes)\n      .where(eq(proofOfRoutes.proofHash, proofHash));\n    return proof || undefined;\n  }\n\n  // User statistics operations\n  async getUserStats(walletAddress: string): Promise<UserStats | undefined> {\n    const [stats] = await db\n      .select()\n      .from(userStats)\n      .where(eq(userStats.walletAddress, walletAddress));\n    return stats || undefined;\n  }\n\n  async createUserStats(data: InsertUserStats): Promise<UserStats> {\n    const [stats] = await db\n      .insert(userStats)\n      .values(data)\n      .returning();\n    return stats;\n  }\n\n  async updateUserStats(walletAddress: string, data: Partial<UserStats>): Promise<UserStats> {\n    const [updated] = await db\n      .update(userStats)\n      .set(data)\n      .where(eq(userStats.walletAddress, walletAddress))\n      .returning();\n    return updated;\n  }\n\n  // Batch operations\n  async createBatch(data: InsertBatch): Promise<Batch> {\n    const [batch] = await db\n      .insert(batches)\n      .values(data)\n      .returning();\n    return batch;\n  }\n\n  async getBatch(id: string): Promise<Batch | undefined> {\n    const [batch] = await db\n      .select()\n      .from(batches)\n      .where(eq(batches.id, id));\n    return batch || undefined;\n  }\n\n  async getPendingBatch(): Promise<Batch | undefined> {\n    const [batch] = await db\n      .select()\n      .from(batches)\n      .where(eq(batches.status, \"pending\"))\n      .orderBy(desc(batches.createdAt))\n      .limit(1);\n    return batch || undefined;\n  }\n\n  async updateBatch(id: string, data: Partial<Batch>): Promise<Batch> {\n    const [updated] = await db\n      .update(batches)\n      .set(data)\n      .where(eq(batches.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getBatchTransactions(batchId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.batchId, batchId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // API Key operations\n  async createApiKey(data: InsertApiKey): Promise<ApiKey> {\n    const [key] = await db\n      .insert(apiKeys)\n      .values(data)\n      .returning();\n    return key;\n  }\n\n  async getApiKey(key: string): Promise<ApiKey | undefined> {\n    const [apiKey] = await db\n      .select()\n      .from(apiKeys)\n      .where(and(eq(apiKeys.key, key), eq(apiKeys.active, true)));\n    return apiKey || undefined;\n  }\n\n  async getApiKeysByWallet(walletAddress: string): Promise<ApiKey[]> {\n    return await db\n      .select()\n      .from(apiKeys)\n      .where(eq(apiKeys.walletAddress, walletAddress))\n      .orderBy(desc(apiKeys.createdAt));\n  }\n\n  async updateApiKey(id: string, data: Partial<ApiKey>): Promise<ApiKey> {\n    const [updated] = await db\n      .update(apiKeys)\n      .set(data)\n      .where(eq(apiKeys.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteApiKey(id: string): Promise<void> {\n    await db\n      .delete(apiKeys)\n      .where(eq(apiKeys.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7964},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/transaction-history.tsx":{"content":"import { useState } from \"react\";\nimport { Eye, ExternalLink, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProofOfRoute } from \"@/components/proof-of-route\";\nimport type { Transaction } from \"@shared/schema\";\n\ninterface TransactionHistoryProps {\n  transactions: Transaction[];\n  isLoading: boolean;\n}\n\nexport function TransactionHistory({ transactions, isLoading }: TransactionHistoryProps) {\n  const [expandedId, setExpandedId] = useState<string | null>(null);\n  const [showProofId, setShowProofId] = useState<string | null>(null);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"h-20 bg-muted animate-pulse rounded\" />\n        ))}\n      </div>\n    );\n  }\n\n  if (!transactions || transactions.length === 0) {\n    return (\n      <div className=\"text-center py-12\" data-testid=\"empty-state-transactions\">\n        <Eye className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n        <p className=\"text-muted-foreground\">No transactions yet</p>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Execute your first protected swap to see it here\n        </p>\n      </div>\n    );\n  }\n\n  const getRiskColor = (score: number) => {\n    if (score <= 30) return \"text-green-600 dark:text-green-400 bg-green-500/10\";\n    if (score <= 70) return \"text-yellow-600 dark:text-yellow-400 bg-yellow-500/10\";\n    if (score <= 90) return \"text-orange-600 dark:text-orange-400 bg-orange-500/10\";\n    return \"text-red-600 dark:text-red-400 bg-red-500/10\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"text-green-600 dark:text-green-400\";\n      case \"failed\":\n        return \"text-red-600 dark:text-red-400\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\" data-testid=\"transaction-history\">\n      {transactions.map((tx) => (\n        <div\n          key={tx.id}\n          className=\"border border-border rounded-lg overflow-hidden hover-elevate\"\n        >\n          <button\n            onClick={() => setExpandedId(expandedId === tx.id ? null : tx.id)}\n            className=\"w-full p-4 text-left transition-colors\"\n            data-testid={`button-transaction-${tx.id}`}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <span className=\"font-mono font-medium\">\n                    {tx.inputAmount} {tx.inputToken} → {tx.outputAmount} {tx.outputToken}\n                  </span>\n                  <span className={`text-xs px-2 py-0.5 rounded-full ${getRiskColor(tx.riskScore)}`}>\n                    Risk: {tx.riskScore}\n                  </span>\n                  <span className={`text-xs font-medium ${getStatusColor(tx.status)}`}>\n                    {tx.status}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                  <span>Via: {tx.selectedRoute}</span>\n                  <span>Saved: ${tx.actualSavings}</span>\n                  <span>{tx.executionTime}ms</span>\n                  <span>{new Date(tx.createdAt).toLocaleDateString()}</span>\n                </div>\n              </div>\n              {expandedId === tx.id ? (\n                <ChevronUp className=\"w-5 h-5 text-muted-foreground\" />\n              ) : (\n                <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n              )}\n            </div>\n          </button>\n\n          {/* Expanded Details */}\n          {expandedId === tx.id && (\n            <div className=\"p-4 border-t border-border bg-card/50\">\n              <div className=\"grid md:grid-cols-2 gap-6 mb-4\">\n                <div>\n                  <div className=\"text-sm font-medium mb-2\">Transaction Details</div>\n                  <div className=\"space-y-1 text-sm text-muted-foreground\">\n                    <div className=\"flex justify-between\">\n                      <span>Wallet:</span>\n                      <span className=\"font-mono text-xs\">\n                        {tx.walletAddress.slice(0, 8)}...{tx.walletAddress.slice(-6)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Batch ID:</span>\n                      <span className=\"font-mono text-xs\">{tx.batchId || \"N/A\"}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>MEV Detected:</span>\n                      <span className={tx.mevDetected ? \"text-destructive\" : \"text-green-600 dark:text-green-400\"}>\n                        {tx.mevDetected ? \"Yes\" : \"No\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"text-sm font-medium mb-2\">Protection Stats</div>\n                  <div className=\"space-y-1 text-sm text-muted-foreground\">\n                    <div className=\"flex justify-between\">\n                      <span>Potential Savings:</span>\n                      <span className=\"font-mono\">${tx.potentialSavings}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Actual Savings:</span>\n                      <span className=\"font-mono text-primary\">${tx.actualSavings}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Execution Time:</span>\n                      <span className=\"font-mono\">{tx.executionTime}ms</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowProofId(showProofId === tx.id ? null : tx.id)}\n                  data-testid={`button-view-proof-${tx.id}`}\n                >\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  {showProofId === tx.id ? \"Hide Proof-of-Route\" : \"View Proof-of-Route\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  asChild\n                  data-testid={`button-explorer-${tx.id}`}\n                >\n                  <a\n                    href={`https://solscan.io/tx/${tx.proofHash}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    View on Explorer\n                  </a>\n                </Button>\n              </div>\n\n              {/* Proof-of-Route Panel */}\n              {showProofId === tx.id && (\n                <div className=\"mt-4\">\n                  <ProofOfRoute transactionId={tx.id} />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":7215},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/docs.tsx":{"content":"import { Link } from \"wouter\";\nimport { Shield, Code2, Zap, Copy, CheckCircle2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Docs() {\n  const [copiedSection, setCopiedSection] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const copyCode = async (code: string, section: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopiedSection(section);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Code snippet copied successfully\",\n      });\n      setTimeout(() => setCopiedSection(null), 2000);\n    } catch (err) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const installCode = `npm install @zephyra/sdk`;\n  \n  const basicUsageCode = `import { Zephyra } from '@zephyra/sdk';\n\n// Initialize Zephyra\nconst zephyra = new Zephyra({\n  network: 'devnet' // or 'mainnet-beta'\n});\n\n// Protect a swap\nconst result = await zephyra.protectSwap({\n  inputToken: 'SOL',\n  outputToken: 'USDC',\n  amount: 10,\n  userAddress: wallet.publicKey.toString()\n});\n\nconsole.log(\\`Saved: $\\${result.actualSavings}\\`);\nconsole.log(\\`Risk Score: \\${result.riskScore}/100\\`);`;\n\n  const advancedCode = `// Custom safety logic\nconst customProtection = zephyra.createSafetyRule({\n  name: 'low-latency-only',\n  condition: (simulation) => simulation.latency < 100,\n  action: 'reject',\n  message: 'Transaction exceeds latency threshold'\n});\n\n// Apply rule\nconst result = await zephyra.protectSwap({\n  inputToken: 'SOL',\n  outputToken: 'USDC',\n  amount: 10,\n  userAddress: wallet.publicKey.toString()\n}, {\n  safetyRules: [customProtection]\n});`;\n\n  const apiReferenceCode = `interface ZephyraSDK {\n  // Simulate and protect a swap\n  protectSwap(params: SwapParams, options?: Options): Promise<Result>;\n  \n  // Get risk analysis only\n  analyzeRisk(params: SwapParams): Promise<RiskAnalysis>;\n  \n  // Create custom safety rules\n  createSafetyRule(rule: SafetyRule): SafetyRule;\n  \n  // Get transaction proof\n  getProof(transactionId: string): Promise<ProofOfRoute>;\n}\n\ninterface SwapParams {\n  inputToken: string;\n  outputToken: string;\n  amount: number;\n  userAddress: string;\n}\n\ninterface Result {\n  transactionId: string;\n  riskScore: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  outputAmount: string;\n  actualSavings: string;\n  potentialSavings: string;\n  proofHash: string;\n  executionTime: number;\n}`;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-6 h-16 flex items-center justify-between\">\n          <Link href=\"/\">\n            <span className=\"flex items-center gap-2 hover:opacity-80 transition-opacity cursor-pointer\" data-testid=\"link-logo-home\">\n              <Shield className=\"w-6 h-6 text-primary\" />\n              <span className=\"font-sans font-semibold text-xl tracking-tight\">Zephyra</span>\n            </span>\n          </Link>\n          <div className=\"flex items-center gap-6\">\n            <Link href=\"/dashboard\">\n              <span className=\"text-sm text-muted-foreground hover:text-foreground transition-colors cursor-pointer\" data-testid=\"link-dashboard\">\n                Dashboard\n              </span>\n            </Link>\n            <Link href=\"/swap\">\n              <Button data-testid=\"button-try-demo\">Try Demo</Button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"pt-24 pb-12 px-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-12\">\n            <div className=\"inline-flex items-center gap-2 px-3 py-1 rounded-full bg-primary/10 border border-primary/20 mb-6\">\n              <Code2 className=\"w-4 h-4 text-primary\" />\n              <span className=\"text-sm font-medium text-primary\">Developer Documentation</span>\n            </div>\n            <h1 className=\"text-4xl font-semibold mb-4\">Zephyra SDK</h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Build MEV protection into your Solana dApp with just a few lines of code.\n              Our SDK handles simulation, routing, and execution while you focus on building.\n            </p>\n          </div>\n\n          {/* Quick Start */}\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Quick Start</h2>\n            \n            <Card className=\"mb-6\">\n              <div className=\"p-6 border-b border-border\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-medium\">Installation</h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyCode(installCode, 'install')}\n                  >\n                    {copiedSection === 'install' ? (\n                      <CheckCircle2 className=\"w-4 h-4\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </div>\n                <pre className=\"p-4 rounded bg-muted font-mono text-sm overflow-x-auto\">\n                  <code>{installCode}</code>\n                </pre>\n              </div>\n              \n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-medium\">Basic Usage</h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyCode(basicUsageCode, 'basic')}\n                  >\n                    {copiedSection === 'basic' ? (\n                      <CheckCircle2 className=\"w-4 h-4\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </div>\n                <pre className=\"p-4 rounded bg-muted font-mono text-sm overflow-x-auto\">\n                  <code>{basicUsageCode}</code>\n                </pre>\n              </div>\n            </Card>\n          </section>\n\n          {/* Features */}\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-6\">Key Features</h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card className=\"p-6\">\n                <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <Shield className=\"w-5 h-5 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">AI Risk Scoring</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Real-time risk analysis (0-100) for every transaction with explainable AI reasoning.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <Zap className=\"w-5 h-5 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Sub-100ms Latency</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Lightning-fast simulation and execution powered by Ephemeral Rollups.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <Code2 className=\"w-5 h-5 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Custom Safety Logic</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Define your own rules: latency thresholds, risk limits, auto-warnings, and more.\n                </p>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <CheckCircle2 className=\"w-5 h-5 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Proof-of-Route</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Every transaction includes verifiable proof with complete audit trail.\n                </p>\n              </Card>\n            </div>\n          </section>\n\n          {/* Advanced Usage */}\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Advanced Usage</h2>\n            \n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-medium\">Custom Safety Rules</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyCode(advancedCode, 'advanced')}\n                >\n                  {copiedSection === 'advanced' ? (\n                    <CheckCircle2 className=\"w-4 h-4\" />\n                  ) : (\n                    <Copy className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n              <pre className=\"p-4 rounded bg-muted font-mono text-sm overflow-x-auto\">\n                <code>{advancedCode}</code>\n              </pre>\n              <p className=\"text-sm text-muted-foreground mt-4\">\n                Create custom protection rules tailored to your application's needs. Examples:\n              </p>\n              <ul className=\"mt-3 space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                  <span>Only allow swaps with latency under 100ms</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                  <span>Auto-warn users if risk score exceeds 70</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                  <span>Reject transactions that detect wallet drain patterns</span>\n                </li>\n              </ul>\n            </Card>\n          </section>\n\n          {/* API Reference */}\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-semibold mb-4\">API Reference</h2>\n            \n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"font-medium\">TypeScript Interfaces</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyCode(apiReferenceCode, 'api')}\n                >\n                  {copiedSection === 'api' ? (\n                    <CheckCircle2 className=\"w-4 h-4\" />\n                  ) : (\n                    <Copy className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n              <pre className=\"p-4 rounded bg-muted font-mono text-sm overflow-x-auto\">\n                <code>{apiReferenceCode}</code>\n              </pre>\n            </Card>\n          </section>\n\n          {/* Support */}\n          <section>\n            <Card className=\"p-8 bg-primary/5 border-primary/20\">\n              <h2 className=\"text-2xl font-semibold mb-4\">Need Help?</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Join our community or reach out for integration support.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button size=\"lg\" data-testid=\"button-join-discord\">\n                  Join Discord\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" data-testid=\"button-view-examples\">\n                  View Examples on GitHub\n                </Button>\n              </div>\n            </Card>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12359},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"design_guidelines.md":{"content":"# Zephyra Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Hybrid Design System inspired by fintech security platforms (Stripe's clarity + Linear's minimalism + trading platform data visualization)\n\n**Core Philosophy:** \"Invisible protection, visible confidence\" - Users should feel secure without being overwhelmed by complexity. Every UI element reinforces trust, speed, and transparency.\n\n**Key Design Principles:**\n1. **Clarity First:** Complex security concepts presented through simple, scannable interfaces\n2. **Data Transparency:** Real numbers, real savings, verifiable proof\n3. **Speed Signals:** Visual indicators of sub-100ms performance throughout\n4. **Trust Through Minimalism:** Clean layouts that suggest professional-grade security\n\n---\n\n## Typography System\n\n**Primary Font:** Inter (via Google Fonts CDN)\n- Display: 600 weight, 36-48px for hero headlines\n- Headings: 600 weight, 24-32px for section titles\n- Body: 400 weight, 16px for primary text\n- Captions: 500 weight, 14px for labels and metrics\n\n**Secondary Font:** JetBrains Mono (via Google Fonts CDN) \n- Used exclusively for: transaction hashes, numerical data, code snippets, API documentation\n- Weight: 400 for regular code, 500 for emphasized values\n\n**Hierarchy Rules:**\n- Hero messaging uses large display type with generous letter-spacing (tracking-tight)\n- Metric displays combine large numerals (JetBrains Mono 32-40px) with small unit labels (Inter 12px)\n- Danger alerts use 600 weight Inter with slightly increased size (18px)\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Tailwind units of **4, 6, 8, 12, 16** as primary rhythm\n- Component padding: p-6 or p-8\n- Section spacing: py-12 (mobile), py-16 (desktop)\n- Card gaps: gap-6 for grids, gap-4 for lists\n- Icon-to-text spacing: gap-3\n\n**Grid System:**\n- Dashboard: 12-column grid with max-w-7xl container\n- Comparison views: 2-column split (lg:grid-cols-2) with gap-8\n- Feature showcases: 3-column grid (lg:grid-cols-3) for landing page\n- Mobile: Always stack to single column\n\n**Container Strategy:**\n- Full-bleed hero sections with inner max-w-6xl content\n- Dashboard content constrained to max-w-7xl\n- Narrow reading width for documentation (max-w-prose)\n\n---\n\n## Component Library\n\n### Navigation\n**Desktop:** Horizontal nav with backdrop blur effect (backdrop-blur-lg)\n- Fixed position with border-b separator\n- Logo left, primary actions right\n- \"Connect Wallet\" button prominently placed\n\n**Mobile:** Hamburger menu with slide-out drawer\n- Full-height overlay with navigation links\n- CTA buttons stacked at bottom\n\n### Hero Section (Landing Page)\n**Layout:** Split layout with visual hierarchy\n- Left: Headline + subheadline + two CTAs (primary + secondary)\n- Right: Animated comparison widget showing \"Safe vs Unsafe Route\"\n\n**Comparison Widget (Key Visual):**\n```\n┌─────────────────────────────────────┐\n│  Without Zephyra        ❌          │\n│  10 SOL → 1,823 USDC               │\n│  Lost: $230 to MEV                 │\n├─────────────────────────────────────┤\n│  With Zephyra          ✅          │\n│  10 SOL → 1,843 USDC               │\n│  Protected: $223 saved             │\n└─────────────────────────────────────┘\n```\n- Use subtle gradients (red tint for unsafe, green tint for safe)\n- Animated counter showing savings accumulate\n- Micro-interaction: Pulsing shield icon on protected route\n\n### Dashboard Cards\n**Savings Summary Card:**\n- Large numeral display: Total savings (e.g., \"$2,847\")\n- Sparkline chart showing savings over time\n- Small metrics below: Transactions protected, Average savings per tx\n\n**Transaction History Table:**\n- Columns: Timestamp, Route, Amount, Risk Score, Savings\n- Risk score displayed as colored badge (0-30: green, 31-70: yellow, 71-100: red)\n- Expandable rows reveal Proof-of-Route details\n\n**Risk Gauge Component:**\n```\nRisk Score: 87/100\n[────────────█─] CRITICAL\n```\n- Horizontal progress bar with dynamic color fill\n- Text label changes based on score range\n- Positioned prominently before transaction confirmation\n\n### Proof-of-Route Panel\n**Accordion-Style Expandable Section:**\n1. Route Selection Analysis\n   - Shows all routes considered (Jupiter, Raydium, Orca)\n   - Highlights chosen route with reasoning\n2. MEV Detection Log\n   - Timestamps of bot activity detected\n   - Predicted sandwich attack vectors blocked\n3. Execution Timeline\n   - Visual timeline showing: Simulation (50ms) → Route Selection (30ms) → Execution (20ms)\n   - Total time badge: \"Protected in 100ms\"\n4. Verifiable Hash\n   - Transaction signature with copy button\n   - Link to Solana Explorer\n\n### Buttons & CTAs\n**Primary CTA:** \n- Solid background with sharp corners (rounded-md)\n- Height: h-12, padding px-8\n- Font: 600 weight, 16px\n- Hover: Subtle scale transform (hover:scale-105)\n\n**Secondary CTA:**\n- Outline variant with transparent background\n- Same sizing as primary\n- Border thickness: border-2\n\n**Danger/Warning Actions:**\n- Use for \"Execute Unsafe Route\" (should discourage use)\n- Red outline with warning icon\n\n### Data Visualization\n**Savings Chart (Time Series):**\n- Line chart with gradient fill below curve\n- X-axis: Timeline (hourly/daily selectable)\n- Y-axis: Cumulative USD saved\n- Tooltip on hover showing exact values\n\n**Risk Distribution (Histogram):**\n- Bar chart showing transaction count by risk score range\n- Color-coded bars matching risk badge colors\n\n### Alert Banners\n**High-Risk Warning:**\n```\n⚠️ High MEV Risk Detected (87/100)\nGuardian recommends using Protected Route\nEstimated savings: $218\n[Use Protected Route]  [Proceed Anyway]\n```\n- Yellow/orange background with dark text\n- Icons for visual scanning\n- Clear action buttons\n\n**Success Confirmation:**\n```\n✅ Transaction Protected Successfully\nSaved $223 from potential MEV attack\nView Proof-of-Route →\n```\n- Green background with success icon\n- Link to detailed proof panel\n\n---\n\n## Special Features Implementation\n\n### Proof-of-Route Transparency Layer\n**Design Pattern:** Expandable accordion with technical details\n- Initially collapsed to avoid overwhelming users\n- \"View Proof\" button triggers smooth expansion\n- Use monospace font for technical data (hashes, timestamps)\n- Include \"Share Proof\" button to export as verifiable JSON\n\n### Developer API Section (Landing Page)\n**Code Block Styling:**\n- Dark background (near-black) with syntax highlighting\n- Copy button in top-right corner\n- Example SDK integration in JavaScript/TypeScript\n- Use JetBrains Mono font throughout\n\n**API Card Grid:**\n- 2x2 grid showing four key SDK methods\n- Each card: Method name, one-line description, \"View Docs\" link\n\n---\n\n## Images\n\n**Hero Section:** \n- Large abstract illustration on right side showing \"shield protecting transaction flow\"\n- Style: Geometric, minimal, uses subtle gradients\n- Dimensions: ~600x600px, positioned to extend slightly beyond content width\n- Alternative: Animated Lottie showing transaction routing through protected path\n\n**Feature Section:**\n- Three supporting illustrations for key features (AI Detection, Private Simulation, Batching)\n- Style: Icon-based diagrams with connecting lines showing data flow\n- Size: ~400x300px each\n\n**Dashboard:**\n- No decorative images; focus on data visualization\n- Charts and graphs provide visual interest\n\n**No stock photos of people** - This is a technical security product where abstract/technical visuals are more appropriate.\n\n---\n\n## Animation Guidelines\n\n**Use Sparingly - Only Where Meaningful:**\n\n1. **Counter Animations:** Savings numbers count up when card first loads (number-ticker effect)\n2. **Risk Gauge Fill:** Progress bar animates from 0 to actual score over 500ms\n3. **Transaction Status:** Smooth transition between \"Simulating...\" → \"Analyzing...\" → \"Protected\" states\n4. **Accordion Expand:** Proof-of-Route details slide down smoothly (300ms ease-out)\n\n**Avoid:**\n- Parallax scrolling\n- Excessive hover effects\n- Auto-playing video backgrounds\n- Distracting micro-interactions\n\n---\n\n## Responsive Behavior\n\n**Mobile (< 768px):**\n- Navigation collapses to hamburger\n- Two-column grids stack to single column\n- Hero section stacks: headline above, visual below\n- Dashboard cards full-width with vertical scroll\n\n**Tablet (768px - 1024px):**\n- Maintain 2-column layouts where appropriate\n- Slightly reduced spacing (py-10 instead of py-16)\n\n**Desktop (> 1024px):**\n- Full 3-column grids for feature showcases\n- Side-by-side comparison views\n- Maximum spacing for breathing room\n\n---\n\n## Accessibility\n\n- All interactive elements have focus states (ring-2 ring-offset-2)\n- Color is never the only indicator (icons + text labels always paired)\n- Risk scores include both numerical value AND text label (\"CRITICAL\")\n- Keyboard navigation fully supported throughout dashboard\n- Form inputs have clear labels and error states","size_bytes":9082},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/proof-of-route.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ChevronDown, ChevronUp, ExternalLink, Copy, CheckCircle2, Clock, Shield } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProofOfRoute as ProofOfRouteType } from \"@shared/schema\";\n\ninterface ProofOfRouteProps {\n  transactionId: string;\n}\n\nexport function ProofOfRoute({ transactionId }: ProofOfRouteProps) {\n  const [isExpanded, setIsExpanded] = useState(true);\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  const { data: proof, isLoading } = useQuery<ProofOfRouteType>({\n    queryKey: ['/api/proof', transactionId],\n  });\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      toast({\n        title: \"Copied to clipboard\",\n        description: \"Proof hash copied successfully\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"h-32 bg-muted animate-pulse rounded\" />\n      </Card>\n    );\n  }\n\n  if (!proof) {\n    return null;\n  }\n\n  const routesConsidered = proof.routesConsidered as any[];\n  const selectionReasoning = proof.selectionReasoning as any;\n  const mevDetectionLog = proof.mevDetectionLog as any[];\n  const protectionMeasures = proof.protectionMeasures as any[];\n\n  return (\n    <Card className=\"p-6\" data-testid=\"proof-of-route-panel\">\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"w-full flex items-center justify-between\"\n        data-testid=\"button-toggle-proof\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <Shield className=\"w-5 h-5 text-primary\" />\n          <div className=\"text-left\">\n            <h2 className=\"text-xl font-semibold\">Proof-of-Route</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Verifiable transparency layer • Executed in {proof.totalTime}ms\n            </p>\n          </div>\n        </div>\n        {isExpanded ? (\n          <ChevronUp className=\"w-5 h-5 text-muted-foreground\" />\n        ) : (\n          <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n        )}\n      </button>\n\n      {isExpanded && (\n        <div className=\"mt-6 space-y-6\">\n          {/* Proof Hash */}\n          <div>\n            <div className=\"text-sm font-medium mb-2\">Verifiable Proof Hash</div>\n            <div className=\"flex items-center gap-2\">\n              <code className=\"flex-1 p-3 rounded bg-muted font-mono text-xs break-all\">\n                {proof.proofHash}\n              </code>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => copyToClipboard(proof.proofHash)}\n                data-testid=\"button-copy-hash\"\n              >\n                {copied ? <CheckCircle2 className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          {/* Routes Considered */}\n          <div>\n            <div className=\"text-sm font-medium mb-3\">Route Analysis</div>\n            <div className=\"space-y-2\">\n              {routesConsidered?.map((route: any, index: number) => (\n                <div\n                  key={index}\n                  className=\"p-3 rounded-lg bg-card-foreground/5 border border-border\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium\">{route.dex}</span>\n                    {route.selected && (\n                      <span className=\"text-xs px-2 py-0.5 rounded-full bg-primary/20 text-primary\">\n                        Selected\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs text-muted-foreground\">\n                    <div>Output: {route.output}</div>\n                    <div>MEV Risk: {route.mevRisk}/100</div>\n                    <div>Impact: {route.priceImpact}%</div>\n                    <div>Latency: {route.latency}ms</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Selection Reasoning */}\n          <div>\n            <div className=\"text-sm font-medium mb-3\">Why This Route Was Chosen</div>\n            <div className=\"p-4 rounded-lg bg-primary/5 border border-primary/20\">\n              <p className=\"text-sm\">{selectionReasoning?.reasoning || \"Best balance of output, MEV protection, and execution speed.\"}</p>\n              {selectionReasoning?.factors && (\n                <ul className=\"mt-3 space-y-1 text-sm text-muted-foreground\">\n                  {selectionReasoning.factors.map((factor: string, index: number) => (\n                    <li key={index} className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                      <span>{factor}</span>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </div>\n\n          {/* MEV Detection Log */}\n          {mevDetectionLog && mevDetectionLog.length > 0 && (\n            <div>\n              <div className=\"text-sm font-medium mb-3\">MEV Threat Detection</div>\n              <div className=\"space-y-2\">\n                {mevDetectionLog.map((log: any, index: number) => (\n                  <div\n                    key={index}\n                    className=\"p-3 rounded-lg bg-destructive/5 border border-destructive/20\"\n                  >\n                    <div className=\"flex items-start gap-2 text-sm\">\n                      <Clock className=\"w-4 h-4 text-destructive mt-0.5\" />\n                      <div>\n                        <div className=\"font-medium text-destructive\">{log.threat}</div>\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          Detected at: {log.timestamp}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Protection Measures */}\n          {protectionMeasures && protectionMeasures.length > 0 && (\n            <div>\n              <div className=\"text-sm font-medium mb-3\">Protection Applied</div>\n              <div className=\"space-y-2\">\n                {protectionMeasures.map((measure: any, index: number) => (\n                  <div\n                    key={index}\n                    className=\"flex items-start gap-2 text-sm\"\n                  >\n                    <Shield className=\"w-4 h-4 text-primary mt-0.5\" />\n                    <span>{measure}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Execution Timeline */}\n          <div>\n            <div className=\"text-sm font-medium mb-3\">Execution Timeline</div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between p-2 rounded bg-card-foreground/5\">\n                <span className=\"text-sm\">Simulation</span>\n                <span className=\"font-mono text-sm\">{proof.simulationTime}ms</span>\n              </div>\n              <div className=\"flex items-center justify-between p-2 rounded bg-card-foreground/5\">\n                <span className=\"text-sm\">Route Selection</span>\n                <span className=\"font-mono text-sm\">{proof.routeSelectionTime}ms</span>\n              </div>\n              <div className=\"flex items-center justify-between p-2 rounded bg-card-foreground/5\">\n                <span className=\"text-sm\">Execution</span>\n                <span className=\"font-mono text-sm\">{proof.executionTime}ms</span>\n              </div>\n              <div className=\"flex items-center justify-between p-2 rounded bg-primary/5 border border-primary/20 font-medium\">\n                <span className=\"text-sm\">Total Time</span>\n                <span className=\"font-mono text-sm text-primary\">{proof.totalTime}ms</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Blockchain Verification */}\n          {proof.blockchainTxSignature && (\n            <div>\n              <div className=\"text-sm font-medium mb-2\">Blockchain Verification</div>\n              <Button\n                variant=\"outline\"\n                asChild\n                className=\"w-full\"\n                data-testid=\"button-view-on-explorer\"\n              >\n                <a\n                  href={proof.verificationUrl || `https://solscan.io/tx/${proof.blockchainTxSignature}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  View Transaction on Solana Explorer\n                </a>\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":9282},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Shield, Zap, Eye, Code2, TrendingUp, Lock, CheckCircle2, ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-6 h-16 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-primary\" />\n            <span className=\"font-sans font-semibold text-xl tracking-tight\">Zephyra</span>\n          </div>\n          <div className=\"flex items-center gap-6\">\n            <Link href=\"/dashboard\">\n              <span className=\"text-sm text-muted-foreground hover:text-foreground transition-colors cursor-pointer\" data-testid=\"link-dashboard\">\n                Dashboard\n              </span>\n            </Link>\n            <Link href=\"/sdk\">\n              <span className=\"text-sm text-muted-foreground hover:text-foreground transition-colors cursor-pointer\" data-testid=\"link-developer-api\">\n                Developer API\n              </span>\n            </Link>\n            <Link href=\"/dashboard\">\n              <Button data-testid=\"button-get-started\">Get Started</Button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 px-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Left: Headlines + CTAs */}\n            <div className=\"space-y-8\">\n              <div className=\"inline-flex items-center gap-2 px-3 py-1 rounded-full bg-primary/10 border border-primary/20\">\n                <Zap className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">Sub-100ms Protection</span>\n              </div>\n              \n              <h1 className=\"font-sans font-semibold text-5xl lg:text-6xl leading-tight tracking-tight\">\n                Stop MEV Attacks<br />\n                <span className=\"text-primary\">Before They Happen</span>\n              </h1>\n              \n              <p className=\"text-lg text-muted-foreground max-w-md\">\n                AI-powered real-time protection for your DeFi swaps. Save money on every transaction \n                with transparent, verifiable route optimization powered by Ephemeral Rollups.\n              </p>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/dashboard\">\n                  <Button size=\"lg\" className=\"w-full sm:w-auto\" data-testid=\"button-launch-app\">\n                    Launch App <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </Link>\n                <Link href=\"/docs\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"w-full sm:w-auto\" data-testid=\"button-view-docs\">\n                    <Code2 className=\"w-4 h-4 mr-2\" /> Developer API\n                  </Button>\n                </Link>\n              </div>\n\n              <div className=\"flex items-center gap-8 pt-4\">\n                <div>\n                  <div className=\"text-2xl font-semibold font-mono\">$400M+</div>\n                  <div className=\"text-sm text-muted-foreground\">Lost to MEV in 2025</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-semibold font-mono\">&lt;100ms</div>\n                  <div className=\"text-sm text-muted-foreground\">Protection Speed</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-semibold font-mono\">10-15%</div>\n                  <div className=\"text-sm text-muted-foreground\">Avg. Savings</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right: Comparison Widget */}\n            <div className=\"space-y-4\">\n              <Card className=\"p-6 border-destructive/50 bg-destructive/5\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-muted-foreground\">Without Zephyra</div>\n                    <div className=\"text-2xl font-mono font-semibold mt-2\">10 SOL → 1,823 USDC</div>\n                  </div>\n                  <div className=\"w-10 h-10 rounded-full bg-destructive/20 flex items-center justify-center\">\n                    <span className=\"text-xl\">❌</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Direct route</span>\n                    <span className=\"text-destructive font-medium\">Sandwich detected</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Lost to MEV</span>\n                    <span className=\"text-destructive font-semibold font-mono\">$230 USD</span>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6 border-primary/50 bg-primary/5\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <div className=\"text-sm font-medium text-muted-foreground\">With Zephyra</div>\n                    <div className=\"text-2xl font-mono font-semibold mt-2 text-primary\">10 SOL → 1,847 USDC</div>\n                  </div>\n                  <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                    <CheckCircle2 className=\"w-6 h-6 text-primary\" />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Protected route</span>\n                    <span className=\"text-primary font-medium\">Private ER</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Amount saved</span>\n                    <span className=\"text-primary font-semibold font-mono\">$223 USD ✓</span>\n                  </div>\n                </div>\n              </Card>\n\n              <div className=\"text-center text-sm text-muted-foreground\">\n                <Lock className=\"w-4 h-4 inline mr-1\" />\n                Protected by MagicBlock Ephemeral Rollups\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-6 bg-card/50\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-semibold mb-4\">How Zephyra Protects You</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Three layers of protection working together in real-time to maximize your savings\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"p-6 hover-elevate\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                <Eye className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">AI Risk Detection</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Real-time analysis of pool liquidity, MEV bot activity, and transaction patterns to \n                calculate risk scores (0-100) in &lt;50ms.\n              </p>\n              <div className=\"text-sm text-muted-foreground space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Sandwich attack detection</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Front-running prevention</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Pool volatility monitoring</span>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 hover-elevate\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                <Zap className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Private Simulation</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Execute swaps in Private Ephemeral Rollups before hitting mainnet. Hide your intent \n                from MEV bots and get guaranteed pricing.\n              </p>\n              <div className=\"text-sm text-muted-foreground space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Multi-DEX route comparison</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Zero-fee simulation</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Optimal path selection</span>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 hover-elevate\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                <TrendingUp className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">Proof of Route</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Every transaction includes a verifiable proof showing exactly how we protected you. \n                Full transparency with cryptographic verification.\n              </p>\n              <div className=\"text-sm text-muted-foreground space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Audit trail with timestamps</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Route selection reasoning</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n                  <span>Blockchain verification</span>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Developer API Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <div className=\"inline-flex items-center gap-2 px-3 py-1 rounded-full bg-primary/10 border border-primary/20 mb-6\">\n                <Code2 className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium text-primary\">Developer API</span>\n              </div>\n              <h2 className=\"text-4xl font-semibold mb-6\">\n                Build MEV Protection<br />Into Your dApp\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-8\">\n                Integrate Zephyra's protection layer with just a few lines of code. \n                Our SDK handles simulation, routing, and execution while you focus on building.\n              </p>\n              <Link href=\"/docs\">\n                <Button size=\"lg\" data-testid=\"button-explore-api\">\n                  Explore API <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </div>\n\n            <Card className=\"p-6 bg-card-foreground/5\">\n              <pre className=\"text-sm font-mono overflow-x-auto\">\n                <code className=\"text-foreground\">{`import { Zephyra } from '@zephyra/sdk';\n\nconst zephyra = new Zephyra();\n\n// Simulate and protect a swap\nconst result = await zephyra.protectSwap({\n  inputToken: 'SOL',\n  outputToken: 'USDC',\n  amount: 10,\n  userAddress: wallet.publicKey\n});\n\nconsole.log(\\`Saved: $\\${result.savings}\\`);\n// => Saved: $223`}</code>\n              </pre>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-6 bg-primary/5\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-4xl font-semibold mb-6\">\n            Start Protecting Your Transactions\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of traders saving an average of 10-15% on every swap with Zephyra's AI-powered MEV protection.\n          </p>\n          <Link href=\"/dashboard\">\n            <Button size=\"lg\" data-testid=\"button-launch-zephyra\">\n              Launch Zephyra <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-12 px-6 border-t border-border\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-primary\" />\n              <span className=\"font-semibold\">Zephyra</span>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              Built for Cypherpunk Hackathon 2025 • Powered by MagicBlock\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14335},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 12%;\n\n  --border: 220 13% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 15% 12%;\n\n  --card-border: 220 12% 92%;\n\n  --sidebar: 220 8% 94%;\n\n  --sidebar-foreground: 220 15% 12%;\n\n  --sidebar-border: 220 10% 90%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 220 5% 98%;\n\n  --sidebar-accent: 220 10% 88%;\n\n  --sidebar-accent-foreground: 220 15% 12%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 10% 92%;\n\n  --popover-foreground: 220 15% 12%;\n\n  --popover-border: 220 12% 88%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 220 5% 98%;\n\n  --secondary: 220 12% 86%;\n\n  --secondary-foreground: 220 15% 12%;\n\n  --muted: 220 15% 90%;\n\n  --muted-foreground: 220 12% 35%;\n\n  --accent: 220 18% 88%;\n\n  --accent-foreground: 220 15% 12%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 220 13% 75%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 45%;\n  --chart-2: 195 88% 42%;\n  --chart-3: 173 80% 38%;\n  --chart-4: 43 84% 48%;\n  --chart-5: 27 87% 55%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 12% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 12% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 12% / 0.06), 0px 1px 2px -1px hsl(220 15% 12% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 12% / 0.08), 0px 2px 4px -2px hsl(220 15% 12% / 0.06);\n  --shadow-md: 0px 6px 8px -2px hsl(220 15% 12% / 0.10), 0px 4px 6px -2px hsl(220 15% 12% / 0.08);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 15% 12% / 0.12), 0px 6px 8px -2px hsl(220 15% 12% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 15% 12% / 0.14), 0px 10px 15px -3px hsl(220 15% 12% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 12% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 18% 8%;\n\n  --foreground: 220 8% 92%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 16% 10%;\n\n  --card-foreground: 220 8% 92%;\n\n  --card-border: 220 14% 14%;\n\n  --sidebar: 220 15% 12%;\n\n  --sidebar-foreground: 220 8% 92%;\n\n  --sidebar-border: 220 13% 16%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 220 5% 98%;\n\n  --sidebar-accent: 220 12% 16%;\n\n  --sidebar-accent-foreground: 220 8% 92%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 14% 14%;\n\n  --popover-foreground: 220 8% 92%;\n\n  --popover-border: 220 12% 18%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 220 5% 98%;\n\n  --secondary: 220 10% 18%;\n\n  --secondary-foreground: 220 8% 92%;\n\n  --muted: 220 12% 16%;\n\n  --muted-foreground: 220 8% 65%;\n\n  --accent: 220 15% 18%;\n\n  --accent-foreground: 220 8% 92%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 220 13% 28%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 65%;\n  --chart-2: 195 88% 58%;\n  --chart-3: 173 80% 55%;\n  --chart-4: 43 84% 62%;\n  --chart-5: 27 87% 68%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 18% 4% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 18% 4% / 0.50);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 18% 4% / 0.45), 0px 1px 2px -1px hsl(220 18% 4% / 0.35);\n  --shadow: 0px 4px 6px -1px hsl(220 18% 4% / 0.55), 0px 2px 4px -2px hsl(220 18% 4% / 0.45);\n  --shadow-md: 0px 6px 8px -2px hsl(220 18% 4% / 0.60), 0px 4px 6px -2px hsl(220 18% 4% / 0.50);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 18% 4% / 0.65), 0px 6px 8px -2px hsl(220 18% 4% / 0.55);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 18% 4% / 0.70), 0px 10px 15px -3px hsl(220 18% 4% / 0.60);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 18% 4% / 0.75);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9902},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/swap.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Shield, ArrowLeft, AlertTriangle, CheckCircle2, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RiskGauge } from \"@/components/risk-gauge\";\nimport { RouteComparison } from \"@/components/route-comparison\";\nimport { ProofOfRoute } from \"@/components/proof-of-route\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport type { Transaction, SwapSimulationRequest } from \"@shared/schema\";\n\nexport default function Swap() {\n  const [inputToken, setInputToken] = useState(\"SOL\");\n  const [outputToken, setOutputToken] = useState(\"USDC\");\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const [simulationResult, setSimulationResult] = useState<Transaction | null>(null);\n  const walletAddress = \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\";\n  \n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  // Connect WebSocket for real-time updates\n  useWebSocket({ walletAddress });\n\n  // Simulate swap mutation\n  const simulateMutation = useMutation({\n    mutationFn: async (data: SwapSimulationRequest) => {\n      return await apiRequest<Transaction>(\"POST\", \"/api/simulate\", data);\n    },\n    onSuccess: (data) => {\n      console.log(\"Simulation result:\", data);\n      console.log(\"Transaction ID:\", data.id);\n      setSimulationResult(data);\n      toast({\n        title: \"Simulation Complete\",\n        description: `Risk Score: ${data.riskScore}/100 - ${data.riskLevel}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Simulation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Execute swap mutation\n  const executeMutation = useMutation({\n    mutationFn: async () => {\n      if (!simulationResult) throw new Error(\"No simulation result\");\n      console.log(\"Executing with simulation result:\", simulationResult);\n      console.log(\"Transaction ID being sent:\", simulationResult.id);\n      return await apiRequest<Transaction>(\"POST\", \"/api/execute\", {\n        transactionId: simulationResult.id,\n        useProtectedRoute: true,\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions', walletAddress] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats', walletAddress] });\n      toast({\n        title: \"Transaction Protected!\",\n        description: `Saved $${data.actualSavings} from MEV attacks`,\n      });\n      // Reset form\n      setInputAmount(\"\");\n      setSimulationResult(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Execution Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSimulate = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputAmount || parseFloat(inputAmount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    simulateMutation.mutate({\n      walletAddress,\n      inputToken,\n      outputToken,\n      inputAmount,\n    });\n  };\n\n  const handleExecute = () => {\n    executeMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-lg bg-background/80 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-6 h-16 flex items-center justify-between\">\n          <Link href=\"/\">\n            <span className=\"flex items-center gap-2 hover:opacity-80 transition-opacity cursor-pointer\" data-testid=\"link-logo-home\">\n              <Shield className=\"w-6 h-6 text-primary\" />\n              <span className=\"font-sans font-semibold text-xl tracking-tight\">Zephyra</span>\n            </span>\n          </Link>\n          <Link href=\"/dashboard\">\n            <Button variant=\"outline\" data-testid=\"button-view-dashboard\">\n              Dashboard\n            </Button>\n          </Link>\n        </div>\n      </nav>\n\n      <div className=\"pt-24 pb-12 px-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <Link href=\"/dashboard\">\n              <span className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground mb-4 cursor-pointer\" data-testid=\"link-back-dashboard\">\n                <ArrowLeft className=\"w-4 h-4\" />\n                Back to Dashboard\n              </span>\n            </Link>\n            <h1 className=\"text-4xl font-semibold mb-2\" data-testid=\"heading-protected-swap\">Protected Swap</h1>\n            <p className=\"text-muted-foreground\">\n              Simulate and execute your swap with AI-powered MEV protection\n            </p>\n          </div>\n\n          {/* Swap Form */}\n          <Card className=\"p-8 mb-6\">\n            <form onSubmit={handleSimulate}>\n              <div className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"input-token\">From</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <Input\n                        id=\"input-token\"\n                        value={inputToken}\n                        onChange={(e) => setInputToken(e.target.value)}\n                        placeholder=\"SOL\"\n                        data-testid=\"input-from-token\"\n                      />\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={inputAmount}\n                        onChange={(e) => setInputAmount(e.target.value)}\n                        placeholder=\"0.00\"\n                        data-testid=\"input-from-amount\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"output-token\">To</Label>\n                    <div className=\"mt-2\">\n                      <Input\n                        id=\"output-token\"\n                        value={outputToken}\n                        onChange={(e) => setOutputToken(e.target.value)}\n                        placeholder=\"USDC\"\n                        data-testid=\"input-to-token\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={simulateMutation.isPending || !inputAmount}\n                  data-testid=\"button-simulate-swap\"\n                >\n                  {simulateMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Simulating...\n                    </>\n                  ) : (\n                    <>\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Simulate Protected Swap\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Card>\n\n          {/* Simulation Results */}\n          {simulationResult && (\n            <div className=\"space-y-6\">\n              {/* Risk Assessment */}\n              <Card className=\"p-6\" data-testid=\"card-risk-assessment\">\n                <h2 className=\"text-xl font-semibold mb-4\">Risk Assessment</h2>\n                <RiskGauge\n                  score={simulationResult.riskScore}\n                  level={simulationResult.riskLevel as \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\"}\n                />\n                \n                {simulationResult.mevDetected && (\n                  <div className=\"mt-4 p-4 rounded-lg bg-destructive/10 border border-destructive/20\">\n                    <div className=\"flex items-start gap-3\">\n                      <AlertTriangle className=\"w-5 h-5 text-destructive mt-0.5\" />\n                      <div>\n                        <div className=\"font-medium text-destructive\">MEV Risk Detected</div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Potential sandwich attack. Zephyra will use a protected route to prevent loss.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Card>\n\n              {/* Route Comparison */}\n              <RouteComparison\n                selectedRoute={simulationResult.selectedRoute}\n                alternativeRoutes={simulationResult.alternativeRoutes as any}\n                outputAmount={simulationResult.outputAmount}\n                potentialSavings={simulationResult.potentialSavings}\n              />\n\n              {/* Execute Button */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-xl font-semibold mb-2\">Ready to Execute</h2>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Your transaction will be protected via Private Ephemeral Rollup\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm text-muted-foreground\">Estimated Savings</div>\n                    <div className=\"text-2xl font-mono font-semibold text-primary\">\n                      ${simulationResult.potentialSavings}\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleExecute}\n                  disabled={executeMutation.isPending}\n                  className=\"w-full\"\n                  size=\"lg\"\n                  data-testid=\"button-execute-protected\"\n                >\n                  {executeMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Executing Protected Swap...\n                    </>\n                  ) : (\n                    <>\n                      <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                      Execute Protected Swap\n                    </>\n                  )}\n                </Button>\n              </Card>\n\n              {/* Proof of Route (after execution) */}\n              {simulationResult.status === \"completed\" && (\n                <ProofOfRoute transactionId={simulationResult.id} />\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10892},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ============================================================================\n// ZEPHYRA DATA MODELS\n// AI-Powered MEV Protection Platform for Solana DeFi\n// ============================================================================\n\n// Transaction Model - Stores protected swap transactions\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull(),\n  \n  // Transaction Details\n  inputToken: text(\"input_token\").notNull(), // e.g., \"SOL\"\n  outputToken: text(\"output_token\").notNull(), // e.g., \"USDC\"\n  inputAmount: text(\"input_amount\").notNull(), // Stored as string to avoid precision issues\n  outputAmount: text(\"output_amount\").notNull(),\n  \n  // Risk Analysis\n  riskScore: integer(\"risk_score\").notNull(), // 0-100\n  riskLevel: text(\"risk_level\").notNull(), // \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\"\n  \n  // Route Information\n  selectedRoute: text(\"selected_route\").notNull(), // \"jupiter\" | \"raydium\" | \"orca\"\n  alternativeRoutes: jsonb(\"alternative_routes\").notNull(), // Array of route comparisons\n  \n  // MEV Protection\n  mevDetected: boolean(\"mev_detected\").notNull().default(false),\n  potentialSavings: text(\"potential_savings\").notNull(), // USD amount saved\n  actualSavings: text(\"actual_savings\").notNull(),\n  \n  // Execution Details\n  status: text(\"status\").notNull(), // \"simulating\" | \"analyzing\" | \"executing\" | \"completed\" | \"failed\"\n  executionTime: integer(\"execution_time\").notNull(), // in milliseconds\n  batchId: text(\"batch_id\"), // If batched with other transactions\n  \n  // Proof of Route\n  proofHash: text(\"proof_hash\").notNull().unique(), // Verifiable hash\n  proofData: jsonb(\"proof_data\").notNull(), // Full route selection reasoning\n  \n  // Timestamps\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Route Comparison Model - Stores DEX route analysis\nexport const routeComparisons = pgTable(\"route_comparisons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: text(\"transaction_id\").notNull(),\n  \n  // Route Details\n  dex: text(\"dex\").notNull(), // \"jupiter\" | \"raydium\" | \"orca\"\n  estimatedOutput: text(\"estimated_output\").notNull(),\n  priceImpact: text(\"price_impact\").notNull(), // Percentage\n  slippage: text(\"slippage\").notNull(), // Percentage\n  \n  // MEV Analysis\n  mevRisk: integer(\"mev_risk\").notNull(), // 0-100\n  liquidityDepth: text(\"liquidity_depth\").notNull(),\n  \n  // Performance\n  latency: integer(\"latency\").notNull(), // in ms\n  gasEstimate: text(\"gas_estimate\").notNull(),\n  \n  selected: boolean(\"selected\").notNull().default(false),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Risk Analysis Model - Detailed AI risk assessment\nexport const riskAnalyses = pgTable(\"risk_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: text(\"transaction_id\").notNull(),\n  \n  // AI Analysis\n  aiModel: text(\"ai_model\").notNull(), // \"gpt-5\"\n  riskScore: integer(\"risk_score\").notNull(), // 0-100\n  riskFactors: jsonb(\"risk_factors\").notNull(), // Array of identified risks\n  \n  // Detection Results\n  sandwichAttackProbability: integer(\"sandwich_attack_probability\").notNull(), // 0-100\n  frontRunningRisk: integer(\"front_running_risk\").notNull(), // 0-100\n  poolVolatility: integer(\"pool_volatility\").notNull(), // 0-100\n  \n  // Recommendations\n  recommendedAction: text(\"recommended_action\").notNull(), // \"protect\" | \"direct\" | \"wait\"\n  reasoning: text(\"reasoning\").notNull(), // AI explanation\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Proof of Route Model - Transparency layer for audit\nexport const proofOfRoutes = pgTable(\"proof_of_routes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: text(\"transaction_id\").notNull().unique(),\n  proofHash: text(\"proof_hash\").notNull().unique(),\n  \n  // Route Selection Process\n  routesConsidered: jsonb(\"routes_considered\").notNull(), // All routes analyzed\n  selectionReasoning: jsonb(\"selection_reasoning\").notNull(), // Why chosen route won\n  \n  // MEV Protection Log\n  mevDetectionLog: jsonb(\"mev_detection_log\").notNull(), // Timestamp + detected threats\n  protectionMeasures: jsonb(\"protection_measures\").notNull(), // What we did to protect\n  \n  // Execution Timeline\n  simulationTime: integer(\"simulation_time\").notNull(), // ms\n  routeSelectionTime: integer(\"route_selection_time\").notNull(), // ms\n  executionTime: integer(\"execution_time\").notNull(), // ms\n  totalTime: integer(\"total_time\").notNull(), // ms\n  \n  // Verifiability\n  blockchainTxSignature: text(\"blockchain_tx_signature\"), // Solana tx signature\n  verificationUrl: text(\"verification_url\"), // Link to Solana Explorer\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Batch Model - Group transactions for efficient execution\nexport const batches = pgTable(\"batches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  \n  // Batch Details\n  status: text(\"status\").notNull(), // \"pending\" | \"processing\" | \"completed\" | \"failed\"\n  transactionCount: integer(\"transaction_count\").notNull().default(0),\n  totalValue: text(\"total_value\").notNull().default(\"0\"), // Total USD value\n  \n  // Execution Details\n  executionTime: integer(\"execution_time\"), // in milliseconds\n  batchHash: text(\"batch_hash\").notNull().unique(), // Verifiable batch hash\n  \n  // Timestamps\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  executedAt: timestamp(\"executed_at\"),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// User Statistics Model - Track savings and protection stats\nexport const userStats = pgTable(\"user_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  \n  // Aggregate Statistics\n  totalTransactions: integer(\"total_transactions\").notNull().default(0),\n  totalSavings: text(\"total_savings\").notNull().default(\"0\"), // USD\n  averageSavings: text(\"average_savings\").notNull().default(\"0\"), // USD per transaction\n  \n  // Risk Distribution\n  lowRiskCount: integer(\"low_risk_count\").notNull().default(0),\n  mediumRiskCount: integer(\"medium_risk_count\").notNull().default(0),\n  highRiskCount: integer(\"high_risk_count\").notNull().default(0),\n  criticalRiskCount: integer(\"critical_risk_count\").notNull().default(0),\n  \n  // Protection Stats\n  mevAttacksBlocked: integer(\"mev_attacks_blocked\").notNull().default(0),\n  protectedRouteCount: integer(\"protected_route_count\").notNull().default(0),\n  directRouteCount: integer(\"direct_route_count\").notNull().default(0),\n  \n  lastTransactionAt: timestamp(\"last_transaction_at\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// ============================================================================\n// ZOD SCHEMAS FOR VALIDATION\n// ============================================================================\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertRouteComparisonSchema = createInsertSchema(routeComparisons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRiskAnalysisSchema = createInsertSchema(riskAnalyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProofOfRouteSchema = createInsertSchema(proofOfRoutes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserStatsSchema = createInsertSchema(userStats).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastTransactionAt: true,\n});\n\nexport const insertBatchSchema = createInsertSchema(batches).omit({\n  id: true,\n  createdAt: true,\n  executedAt: true,\n  completedAt: true,\n});\n\n// ============================================================================\n// API REQUEST/RESPONSE TYPES\n// ============================================================================\n\n// Swap Simulation Request\nexport const swapSimulationRequestSchema = z.object({\n  walletAddress: z.string(),\n  inputToken: z.string(),\n  outputToken: z.string(),\n  inputAmount: z.string(),\n});\n\n// Swap Execution Request\nexport const swapExecutionRequestSchema = z.object({\n  transactionId: z.string(),\n  useProtectedRoute: z.boolean(),\n});\n\n// Risk Score Response\nexport const riskScoreResponseSchema = z.object({\n  score: z.number().min(0).max(100),\n  level: z.enum([\"LOW\", \"MEDIUM\", \"HIGH\", \"CRITICAL\"]),\n  factors: z.array(z.string()),\n  reasoning: z.string(),\n  recommendedAction: z.enum([\"protect\", \"direct\", \"wait\"]),\n});\n\n// Route Comparison Response\nexport const routeComparisonResponseSchema = z.object({\n  dex: z.string(),\n  estimatedOutput: z.string(),\n  priceImpact: z.string(),\n  slippage: z.string(),\n  mevRisk: z.number(),\n  latency: z.number(),\n  selected: z.boolean(),\n});\n\n// API Keys Model - For SDK authentication\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(), // Encrypted API key\n  name: text(\"name\").notNull(), // Human-readable name (e.g., \"My App Integration\")\n  walletAddress: text(\"wallet_address\").notNull(), // Owner of this API key\n  \n  // Rate Limiting\n  requestsPerMinute: integer(\"requests_per_minute\").notNull().default(60),\n  requestsToday: integer(\"requests_today\").notNull().default(0),\n  lastRequestAt: timestamp(\"last_request_at\"),\n  \n  // Status\n  active: boolean(\"active\").notNull().default(true),\n  expiresAt: timestamp(\"expires_at\"),\n  \n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertApiKeySchema = createInsertSchema(apiKeys).omit({\n  id: true,\n  createdAt: true,\n});\n\n// ============================================================================\n// TYPE EXPORTS\n// ============================================================================\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type RouteComparison = typeof routeComparisons.$inferSelect;\nexport type InsertRouteComparison = z.infer<typeof insertRouteComparisonSchema>;\n\nexport type RiskAnalysis = typeof riskAnalyses.$inferSelect;\nexport type InsertRiskAnalysis = z.infer<typeof insertRiskAnalysisSchema>;\n\nexport type ProofOfRoute = typeof proofOfRoutes.$inferSelect;\nexport type InsertProofOfRoute = z.infer<typeof insertProofOfRouteSchema>;\n\nexport type UserStats = typeof userStats.$inferSelect;\nexport type InsertUserStats = z.infer<typeof insertUserStatsSchema>;\n\nexport type Batch = typeof batches.$inferSelect;\nexport type InsertBatch = z.infer<typeof insertBatchSchema>;\n\nexport type ApiKey = typeof apiKeys.$inferSelect;\nexport type InsertApiKey = z.infer<typeof insertApiKeySchema>;\n\nexport type SwapSimulationRequest = z.infer<typeof swapSimulationRequestSchema>;\nexport type SwapExecutionRequest = z.infer<typeof swapExecutionRequestSchema>;\nexport type RiskScoreResponse = z.infer<typeof riskScoreResponseSchema>;\nexport type RouteComparisonResponse = z.infer<typeof routeComparisonResponseSchema>;\n","size_bytes":11438},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/route-comparison.tsx":{"content":"import { CheckCircle2, TrendingUp, Zap, ArrowRight } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface RouteOption {\n  dex: string;\n  estimatedOutput: string;\n  priceImpact: string;\n  slippage: string;\n  mevRisk: number;\n  latency: number;\n  selected: boolean;\n}\n\ninterface RouteComparisonProps {\n  selectedRoute: string;\n  alternativeRoutes: RouteOption[];\n  outputAmount: string;\n  potentialSavings: string;\n}\n\nexport function RouteComparison({\n  selectedRoute,\n  alternativeRoutes,\n  outputAmount,\n  potentialSavings,\n}: RouteComparisonProps) {\n  const routes = alternativeRoutes || [];\n\n  return (\n    <Card className=\"p-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">Route Analysis</h2>\n      <p className=\"text-sm text-muted-foreground mb-6\">\n        Compared {routes.length} routes across Jupiter, Raydium, and Orca DEXs\n      </p>\n\n      <div className=\"space-y-4\">\n        {routes.map((route, index) => (\n          <div\n            key={index}\n            className={`p-4 rounded-lg border ${\n              route.selected\n                ? \"border-primary/50 bg-primary/5\"\n                : \"border-border bg-card\"\n            }`}\n            data-testid={`card-route-${route.dex.toLowerCase()}`}\n          >\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-center gap-3\">\n                {route.selected && (\n                  <CheckCircle2 className=\"w-5 h-5 text-primary\" />\n                )}\n                <div>\n                  <div className=\"font-medium flex items-center gap-2\">\n                    {route.dex}\n                    {route.selected && (\n                      <span className=\"text-xs px-2 py-0.5 rounded-full bg-primary/20 text-primary\">\n                        Selected\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Estimated Output: {route.estimatedOutput} USDC\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm text-muted-foreground\">MEV Risk</div>\n                <div className={`text-lg font-mono font-semibold ${\n                  route.mevRisk > 70 ? \"text-destructive\" : \"text-muted-foreground\"\n                }`}>\n                  {route.mevRisk}/100\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n              <div>\n                <div className=\"text-muted-foreground mb-1\">Price Impact</div>\n                <div className=\"font-mono\">{route.priceImpact}%</div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground mb-1\">Slippage</div>\n                <div className=\"font-mono\">{route.slippage}%</div>\n              </div>\n              <div>\n                <div className=\"text-muted-foreground mb-1\">Latency</div>\n                <div className=\"font-mono flex items-center gap-1\">\n                  <Zap className=\"w-3 h-3\" />\n                  {route.latency}ms\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Summary */}\n      <div className=\"mt-6 p-4 rounded-lg bg-primary/5 border border-primary/20\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <TrendingUp className=\"w-5 h-5 text-primary\" />\n            <div>\n              <div className=\"font-medium\">Best Route Selected: {selectedRoute}</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Protected via Private Ephemeral Rollup\n              </div>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">You'll Save</div>\n            <div className=\"text-2xl font-mono font-semibold text-primary\">\n              ${potentialSavings}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4123},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\ninterface UseWebSocketOptions {\n  walletAddress: string;\n  enabled?: boolean;\n}\n\nexport function useWebSocket({ walletAddress, enabled = true }: UseWebSocketOptions) {\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const queryClient = useQueryClient();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    if (!enabled || !walletAddress) {\n      return;\n    }\n\n    const connect = () => {\n      try {\n        // Construct WebSocket URL\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}/ws?token=${encodeURIComponent(walletAddress)}`;\n        \n        const ws = new WebSocket(wsUrl);\n        wsRef.current = ws;\n\n        ws.onopen = () => {\n          console.log(\"WebSocket connected\");\n          setIsConnected(true);\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            \n            switch (message.type) {\n              case \"transaction_update\":\n                // Invalidate transaction and stats queries to refetch\n                queryClient.invalidateQueries({ queryKey: ['/api/transactions', walletAddress] });\n                queryClient.invalidateQueries({ queryKey: ['/api/stats', walletAddress] });\n                break;\n              \n              case \"batch_executed\":\n                // Invalidate all queries when batch executes\n                queryClient.invalidateQueries({ queryKey: ['/api/transactions', walletAddress] });\n                queryClient.invalidateQueries({ queryKey: ['/api/stats', walletAddress] });\n                break;\n            }\n          } catch (error) {\n            console.error(\"WebSocket message parse error:\", error);\n          }\n        };\n\n        ws.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n        };\n\n        ws.onclose = () => {\n          console.log(\"WebSocket disconnected\");\n          setIsConnected(false);\n          \n          // Attempt to reconnect after 3 seconds\n          reconnectTimeoutRef.current = setTimeout(() => {\n            console.log(\"Attempting to reconnect WebSocket...\");\n            connect();\n          }, 3000);\n        };\n      } catch (error) {\n        console.error(\"WebSocket connection error:\", error);\n      }\n    };\n\n    connect();\n\n    return () => {\n      // Cleanup\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n    };\n  }, [walletAddress, enabled, queryClient]);\n\n  return { isConnected };\n}\n","size_bytes":2839},"replit.md":{"content":"# Zephyra - AI-Powered MEV Protection Platform\n\n## Overview\n\nZephyra is a DeFi security platform that protects Solana transactions from MEV (Maximal Extractable Value) attacks using AI-powered route analysis and real-time simulation. The platform provides sub-100ms protection by analyzing swap routes across multiple DEXs (Jupiter, Raydium, Orca), detecting MEV risks, and executing protected transactions through optimized batching strategies.\n\n**Core Value Proposition:** Transparent, verifiable protection with real savings metrics - users can see exactly how much they save on each swap with cryptographic proof of route selection.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- **Framework:** React 18 with TypeScript\n- **Build Tool:** Vite with hot module replacement\n- **Routing:** Wouter (lightweight client-side routing)\n- **State Management:** TanStack Query (React Query) for server state\n- **UI Components:** Radix UI primitives with custom shadcn/ui implementation\n- **Styling:** Tailwind CSS with custom design system\n\n**Design System:**\n- Hybrid approach inspired by fintech platforms (Stripe clarity + Linear minimalism)\n- Typography: Inter for UI, JetBrains Mono for code/data display\n- Component library: Extensive set of 40+ Radix UI components (accordion, dialog, dropdown, toast, etc.)\n- Theme: Light/dark mode support with CSS custom properties\n- Layout: 12-column grid system with responsive breakpoints\n\n**Key Frontend Patterns:**\n- Real-time updates via WebSocket connection (`useWebSocket` hook)\n- Optimistic UI updates with query invalidation\n- Component-driven architecture with reusable UI primitives\n- Form validation with react-hook-form and Zod schemas\n\n### Backend Architecture\n\n**Technology Stack:**\n- **Runtime:** Node.js with TypeScript (ESM modules)\n- **Framework:** Express.js for HTTP server\n- **Database ORM:** Drizzle ORM with Neon serverless PostgreSQL\n- **Real-time:** WebSocket server for live transaction updates\n- **AI Integration:** OpenAI API (GPT-5) via Replit AI Integrations\n\n**API Design:**\n- RESTful endpoints for transaction simulation and execution\n- WebSocket protocol for real-time status updates\n- Shared schema validation using Zod (client/server type safety)\n\n**Core Business Logic:**\n\n1. **Swap Simulation Flow:**\n   - Accepts user swap intent (input token, output token, amount)\n   - Generates AI-powered risk analysis using OpenAI\n   - Compares routes across multiple DEXs\n   - Calculates MEV risk scores and potential savings\n   - Returns simulation results with proof hash\n\n2. **Batch Execution Strategy:**\n   - Transactions queued into batches for optimal gas savings\n   - Two execution triggers: size threshold (5 txns) or time threshold (30s)\n   - Batching reduces MEV attack surface by obfuscating individual transactions\n   - Real-time broadcast of batch execution status to connected clients\n\n3. **Risk Analysis Engine:**\n   - AI-driven anomaly detection for sandwich attacks, front-running\n   - Four risk levels: LOW (0-30), MEDIUM (31-70), HIGH (71-90), CRITICAL (91-100)\n   - Factors considered: slippage, price impact, liquidity depth, historical MEV patterns\n\n### Data Storage Solutions\n\n**Database:** PostgreSQL (via Neon serverless)\n\n**Schema Design:**\n\n1. **Transactions Table** - Core transaction records\n   - User wallet address, token pairs, amounts\n   - Risk analysis (score, level, MEV detection flags)\n   - Route selection data, execution status\n   - Timestamps, batch references\n\n2. **Route Comparisons** - DEX route analysis\n   - Per-transaction comparison of Jupiter, Raydium, Orca\n   - Output estimates, price impact, slippage, MEV risk per route\n   - Selected route indicator\n\n3. **Risk Analyses** - Detailed AI assessments\n   - Threat indicators, vulnerability scores\n   - AI-generated recommendations\n   - Confidence metrics\n\n4. **Proof of Routes** - Cryptographic verification\n   - Unique proof hashes for route selection\n   - Full reasoning data with timestamp\n   - Signature for verifiability\n\n5. **User Statistics** - Aggregated metrics per wallet\n   - Total transactions, cumulative savings\n   - Average risk scores, MEV blocks count\n\n6. **Batches** - Execution batch tracking\n   - Batch status, transaction count\n   - Combined gas savings, execution timestamp\n\n**Data Access Layer:**\n- Repository pattern via `storage.ts` interface\n- Type-safe queries using Drizzle ORM\n- Automatic timestamp management\n- Transaction isolation for batch operations\n\n### Authentication and Authorization\n\n**Current Implementation:** Mock wallet address for demonstration\n- Wallet address: `EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v`\n- WebSocket authentication via URL token parameter\n- Session-based approach expected for production (connect-pg-simple installed)\n\n**Production Considerations:**\n- Solana wallet adapter integration (Phantom, Solflare)\n- Message signing for wallet ownership verification\n- Session storage in PostgreSQL\n- CORS configuration for cross-origin wallet requests\n\n### External Dependencies\n\n**Third-Party Services:**\n\n1. **OpenAI API (GPT-5)**\n   - Purpose: AI-powered risk analysis and route recommendations\n   - Integration: Replit AI Integrations (managed API key)\n   - Usage: Generates human-readable threat assessments and optimization suggestions\n\n2. **Neon Database**\n   - Purpose: Serverless PostgreSQL hosting\n   - Integration: WebSocket-based connection pooling via `@neondatabase/serverless`\n   - Configuration: Connection string via `DATABASE_URL` environment variable\n\n3. **Google Fonts CDN**\n   - Fonts: Inter, JetBrains Mono, DM Sans, Fira Code, Geist Mono, Architects Daughter\n   - Purpose: Typography system for UI and data display\n\n**DEX Integrations (Planned):**\n- Jupiter Aggregator API (Solana)\n- Raydium DEX protocol\n- Orca DEX protocol\n\n**Development Tools:**\n- Replit-specific plugins: runtime error modal, cartographer, dev banner\n- Drizzle Kit for database migrations\n- ESBuild for production bundling\n\n**Key Dependencies:**\n- Express.js - Web server framework\n- Drizzle ORM - Database toolkit\n- React Query - Server state management\n- Zod - Runtime type validation\n- Radix UI - Accessible component primitives\n- Recharts - Data visualization\n- date-fns - Date manipulation\n- nanoid - Unique ID generation","size_bytes":6350},"client/src/pages/sdk.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Code, Play, Copy, Key, Shield, Zap, CheckCircle2 } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst MOCK_WALLET = \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\";\n\nexport default function SDKPage() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [keyName, setKeyName] = useState(\"\");\n  const [testEndpoint, setTestEndpoint] = useState<\"simulate\" | \"execute\" | \"risk\">(\"simulate\");\n  const [testPayload, setTestPayload] = useState(JSON.stringify({\n    inputToken: \"SOL\",\n    outputToken: \"USDC\",\n    inputAmount: \"1.0\"\n  }, null, 2));\n  const [apiResponse, setApiResponse] = useState(\"\");\n  const [copiedSection, setCopiedSection] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch API keys\n  const { data: apiKeys, isLoading: keysLoading } = useQuery<any[]>({\n    queryKey: [`/api/keys/${MOCK_WALLET}`],\n  });\n\n  // Generate new API key\n  const generateKeyMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/keys`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          walletAddress: MOCK_WALLET,\n          name: keyName || \"My API Key\"\n        }),\n      });\n      \n      const data = await response.json();\n      \n      // Check for errors\n      if (!response.ok) {\n        throw new Error(data.error || data.message || \"Failed to generate API key\");\n      }\n      \n      return data;\n    },\n    onSuccess: (data: any) => {\n      setApiKey(data.key);\n      toast({\n        title: \"API Key Generated\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/keys/${MOCK_WALLET}`] });\n      setKeyName(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to generate API key\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test SDK endpoint\n  const testApiMutation = useMutation({\n    mutationFn: async () => {\n      if (!apiKey) throw new Error(\"API key required\");\n      \n      const endpoints: Record<string, { method: string; url: string }> = {\n        simulate: { method: \"POST\", url: \"/api/sdk/simulate\" },\n        execute: { method: \"POST\", url: \"/api/sdk/execute\" },\n        risk: { method: \"GET\", url: \"/api/sdk/risk-analysis/test-id\" },\n      };\n\n      const endpoint = endpoints[testEndpoint];\n      const headers: Record<string, string> = {\n        \"X-API-Key\": apiKey,\n      };\n\n      if (endpoint.method === \"POST\") {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n\n      const response = await fetch(endpoint.url, {\n        method: endpoint.method,\n        headers,\n        body: endpoint.method === \"POST\" ? testPayload : undefined,\n      });\n\n      const data = await response.json();\n      return { status: response.status, data };\n    },\n    onSuccess: (result) => {\n      setApiResponse(JSON.stringify(result.data, null, 2));\n      toast({\n        title: `API Test: ${result.status}`,\n        description: result.status === 200 ? \"Success!\" : \"Error occurred\",\n        variant: result.status === 200 ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error: any) => {\n      setApiResponse(JSON.stringify({ error: error.message }, null, 2));\n      toast({\n        title: \"API Test Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyCode = (code: string, section: string) => {\n    navigator.clipboard.writeText(code);\n    setCopiedSection(section);\n    setTimeout(() => setCopiedSection(null), 2000);\n    toast({ title: \"Copied to clipboard\" });\n  };\n\n  const jsExample = `import fetch from 'node-fetch';\n\nconst ZEPHYRA_API_KEY = '${apiKey || 'zeph_your_api_key_here'}';\n\n// Simulate MEV-protected swap\nasync function simulateSwap() {\n  const response = await fetch('https://api.zephyra.app/api/sdk/simulate', {\n    method: 'POST',\n    headers: {\n      'X-API-Key': ZEPHYRA_API_KEY,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      inputToken: 'SOL',\n      outputToken: 'USDC',\n      inputAmount: '1.0'\n    })\n  });\n  \n  const result = await response.json();\n  console.log('Risk Score:', result.riskScore);\n  console.log('Selected Route:', result.selectedRoute);\n  console.log('Potential Savings:', result.potentialSavings);\n  return result;\n}\n\nsimulateSwap();`;\n\n  const curlExample = `curl -X POST https://api.zephyra.app/api/sdk/simulate \\\\\n  -H \"X-API-Key: ${apiKey || 'zeph_your_api_key_here'}\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"inputToken\": \"SOL\",\n    \"outputToken\": \"USDC\",\n    \"inputAmount\": \"1.0\"\n  }'`;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-3\">Zephyra SDK</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Integrate MEV protection into your DeFi applications with our developer API\n          </p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"p-6\">\n            <Shield className=\"w-8 h-8 text-primary mb-3\" />\n            <h3 className=\"font-semibold mb-2\">MEV Protection</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              AI-powered risk analysis protects every swap from sandwich attacks and front-running\n            </p>\n          </Card>\n          <Card className=\"p-6\">\n            <Zap className=\"w-8 h-8 text-primary mb-3\" />\n            <h3 className=\"font-semibold mb-2\">Multi-DEX Routing</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Automatically compare Jupiter, Raydium, and Orca to find the best protected route\n            </p>\n          </Card>\n          <Card className=\"p-6\">\n            <Code className=\"w-8 h-8 text-primary mb-3\" />\n            <h3 className=\"font-semibold mb-2\">Simple Integration</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              RESTful API with 3 endpoints - simulate, execute, and analyze. Start in minutes.\n            </p>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Left Column: API Keys & Playground */}\n          <div className=\"space-y-6\">\n            {/* API Key Management */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-semibold mb-4 flex items-center gap-2\">\n                <Key className=\"w-6 h-6\" />\n                API Keys\n              </h2>\n              \n              {/* Generate Key */}\n              <div className=\"mb-6\">\n                <label className=\"text-sm font-medium mb-2 block\">Generate New API Key</label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Key name (e.g., Production App)\"\n                    value={keyName}\n                    onChange={(e) => setKeyName(e.target.value)}\n                    data-testid=\"input-key-name\"\n                  />\n                  <Button\n                    onClick={() => generateKeyMutation.mutate()}\n                    disabled={generateKeyMutation.isPending}\n                    data-testid=\"button-generate-key\"\n                  >\n                    {generateKeyMutation.isPending ? \"Generating...\" : \"Generate\"}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Show generated key */}\n              {apiKey && (\n                <div className=\"mb-6 p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n                  <div className=\"text-sm font-medium mb-2 text-primary\">\n                    ⚠️ Save this key - it won't be shown again!\n                  </div>\n                  <div className=\"flex gap-2 items-center\">\n                    <code className=\"flex-1 p-2 bg-background rounded text-xs font-mono break-all\">\n                      {apiKey}\n                    </code>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => copyCode(apiKey, \"key\")}\n                      data-testid=\"button-copy-key\"\n                    >\n                      {copiedSection === \"key\" ? <CheckCircle2 className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* List existing keys */}\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Your API Keys</label>\n                {keysLoading ? (\n                  <div className=\"space-y-2\">\n                    {[...Array(2)].map((_, i) => (\n                      <div key={i} className=\"h-12 bg-muted animate-pulse rounded\" />\n                    ))}\n                  </div>\n                ) : apiKeys && apiKeys.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {apiKeys.map((key: any) => (\n                      <div\n                        key={key.id}\n                        className=\"p-3 border border-border rounded-lg flex items-center justify-between\"\n                        data-testid={`key-item-${key.id}`}\n                      >\n                        <div>\n                          <div className=\"font-medium text-sm\">{key.name}</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {key.requestsToday} requests today • {key.requestsPerMinute}/min limit\n                          </div>\n                        </div>\n                        <span className={`text-xs px-2 py-1 rounded ${key.active ? 'bg-green-500/20 text-green-600' : 'bg-gray-500/20 text-gray-600'}`}>\n                          {key.active ? \"Active\" : \"Inactive\"}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-6 text-muted-foreground text-sm\">\n                    No API keys yet. Generate one to get started.\n                  </div>\n                )}\n              </div>\n            </Card>\n\n            {/* API Playground */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-semibold mb-4 flex items-center gap-2\">\n                <Play className=\"w-6 h-6\" />\n                API Playground\n              </h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Endpoint</label>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant={testEndpoint === \"simulate\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setTestEndpoint(\"simulate\")}\n                      data-testid=\"button-endpoint-simulate\"\n                    >\n                      Simulate\n                    </Button>\n                    <Button\n                      variant={testEndpoint === \"execute\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setTestEndpoint(\"execute\")}\n                      data-testid=\"button-endpoint-execute\"\n                    >\n                      Execute\n                    </Button>\n                    <Button\n                      variant={testEndpoint === \"risk\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setTestEndpoint(\"risk\")}\n                      data-testid=\"button-endpoint-risk\"\n                    >\n                      Risk Analysis\n                    </Button>\n                  </div>\n                </div>\n\n                {(testEndpoint === \"simulate\" || testEndpoint === \"execute\") && (\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Request Body (JSON)</label>\n                    <Textarea\n                      value={testPayload}\n                      onChange={(e) => setTestPayload(e.target.value)}\n                      className=\"font-mono text-xs\"\n                      rows={6}\n                      data-testid=\"input-test-payload\"\n                    />\n                  </div>\n                )}\n\n                <Button\n                  onClick={() => testApiMutation.mutate()}\n                  disabled={!apiKey || testApiMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"button-test-api\"\n                >\n                  {testApiMutation.isPending ? \"Testing...\" : \"Test API\"}\n                </Button>\n\n                {apiResponse && (\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Response</label>\n                    <pre className=\"p-4 bg-muted rounded text-xs overflow-auto max-h-64 font-mono\">\n                      {apiResponse}\n                    </pre>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n\n          {/* Right Column: Documentation */}\n          <div className=\"space-y-6\">\n            {/* Quick Start */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-semibold mb-4\">Quick Start</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">1. Generate API Key</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Create an API key above. Rate limit: 60 requests/minute.\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold mb-2\">2. JavaScript Example</h3>\n                  <div className=\"relative\">\n                    <pre className=\"p-4 bg-muted rounded text-xs overflow-auto max-h-96 font-mono\">\n                      {jsExample}\n                    </pre>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"absolute top-2 right-2\"\n                      onClick={() => copyCode(jsExample, \"js\")}\n                      data-testid=\"button-copy-js\"\n                    >\n                      {copiedSection === \"js\" ? <CheckCircle2 className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold mb-2\">3. cURL Example</h3>\n                  <div className=\"relative\">\n                    <pre className=\"p-4 bg-muted rounded text-xs overflow-auto font-mono\">\n                      {curlExample}\n                    </pre>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"absolute top-2 right-2\"\n                      onClick={() => copyCode(curlExample, \"curl\")}\n                      data-testid=\"button-copy-curl\"\n                    >\n                      {copiedSection === \"curl\" ? <CheckCircle2 className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* API Reference */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-semibold mb-4\">API Reference</h2>\n              \n              <div className=\"space-y-6\">\n                {/* Simulate Endpoint */}\n                <div>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span className=\"px-2 py-0.5 bg-primary/20 text-primary text-xs font-mono rounded\">POST</span>\n                    <code className=\"text-sm font-mono\">/api/sdk/simulate</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Simulate a MEV-protected swap and get route analysis\n                  </p>\n                  <div className=\"text-xs space-y-1 text-muted-foreground\">\n                    <div><strong>Headers:</strong> X-API-Key: your_key</div>\n                    <div><strong>Body:</strong> {`{ inputToken, outputToken, inputAmount }`}</div>\n                    <div><strong>Response:</strong> Risk score, routes, selected route, potential savings</div>\n                  </div>\n                </div>\n\n                {/* Execute Endpoint */}\n                <div>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span className=\"px-2 py-0.5 bg-primary/20 text-primary text-xs font-mono rounded\">POST</span>\n                    <code className=\"text-sm font-mono\">/api/sdk/execute</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Execute the protected swap and get proof hash\n                  </p>\n                  <div className=\"text-xs space-y-1 text-muted-foreground\">\n                    <div><strong>Headers:</strong> X-API-Key: your_key</div>\n                    <div><strong>Body:</strong> Transaction data from simulate</div>\n                    <div><strong>Response:</strong> Transaction ID, proof hash, actual savings</div>\n                  </div>\n                </div>\n\n                {/* Risk Analysis Endpoint */}\n                <div>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span className=\"px-2 py-0.5 bg-green-500/20 text-green-600 text-xs font-mono rounded\">GET</span>\n                    <code className=\"text-sm font-mono\">/api/sdk/risk-analysis/:id</code>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Get detailed AI risk analysis for a transaction\n                  </p>\n                  <div className=\"text-xs space-y-1 text-muted-foreground\">\n                    <div><strong>Headers:</strong> X-API-Key: your_key</div>\n                    <div><strong>Params:</strong> Transaction ID</div>\n                    <div><strong>Response:</strong> Full AI risk breakdown with MEV probabilities</div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Rate Limits */}\n            <Card className=\"p-6\">\n              <h2 className=\"text-2xl font-semibold mb-4\">Rate Limits</h2>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Requests per minute:</span>\n                  <span className=\"font-mono\">60</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Burst limit:</span>\n                  <span className=\"font-mono\">120</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Response:</span>\n                  <span className=\"font-mono text-destructive\">429 Too Many Requests</span>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19623}},"version":2}